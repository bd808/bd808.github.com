<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: security | bd808.com]]></title>
  <link href="http://bd808.com/blog/categories/security/atom.xml" rel="self"/>
  <link href="http://bd808.com/"/>
  <updated>2014-11-16T10:34:19-07:00</updated>
  <id>http://bd808.com/</id>
  <author>
    <name><![CDATA[Bryan Davis]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GnuPG key transition statement]]></title>
    <link href="http://bd808.com/blog/2014/05/15/gnupg-key-transition-statement/"/>
    <updated>2014-05-15T22:33:39-06:00</updated>
    <id>http://bd808.com/blog/2014/05/15/gnupg-key-transition-statement</id>
    <content type="html"><![CDATA[<!-- MORE -->

<pre><code>
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1,SHA512

I am transitioning GPG keys from an old 1024-bit DSA key to a new
4096-bit RSA key.  The old key will continue to be valid for some time,
but I prefer all new correspondence to be encrypted to the new key, and
will be making all signatures going forward with the new key.

This transition document is signed with both keys to validate the
transition.

If you have signed my old key, I would appreciate signatures on my new
key as well, provided that your signing policy permits that without
re-authenticating me.

The old key, which I am transitioning away from, is:

  pub   1024D/0x41E5C23F0F8E76D6 [created: 2004-10-14]
    Key fingerprint = FE97 560A 1C17 F268 1A20  5B80 41E5 C23F 0F8E 76D6

The new key, to which I am transitioning, is:

  pub   4096R/0xC139E10FD9F20FC1 [created: 2014-05-16]
    Key fingerprint = 7DFA 4AEF AC15 8BFC 151D  2DD8 C139 E10F D9F2 0FC1

To fetch the full new key from a public key server using GnuPG, run:

  gpg --keyserver keys.gnupg.net --recv-key 0xC139E10FD9F20FC1

If you have already validated my old key, you can then validate that the
new key is signed by my old key:

  gpg --check-sigs 0xC139E10FD9F20FC1

If you then want to sign my new key, a simple and safe way to do that is
by using caff as follows:

  caff 0xC139E10FD9F20FC1

Please contact me via e-mail at &lt;bd808@bd808.com&gt; if you have any
questions about this document or this transition.

Bryan Davis
&lt;bd808@bd808.com&gt;
2014-05-15

-----BEGIN PGP SIGNATURE-----

iEYEARECAAYFAlN1m3cACgkQQeXCPw+OdtYXEwCfXUThM0JsPacy1bCBQ6rZpWRY
dAcAoIMg91zhQlgo2DJCu3o9BUzCqEJuiQIcBAEBCgAGBQJTdZt3AAoJEEhMmO+k
BO60xv0QAJEV8VYVqpIdEoZWRYw6sGJVmkTCs2rC4OC68/W+1e41hgPqE+i+6ACU
2MhwusMQhsBu1QpyeWXTOEPMU4rvwwlMeQnIlg+DEFGn2k3qJfxeYooO1Ni9n0US
fb676RByWnaAZUYPebNrmTvk5bv/M5BSU8XDfPmDsFk5hzeOa1j1kw9Loffr74LL
LJozHb8Uj9fMZj1f8SzqlhyqPVUWqF3AEE3Dl14Wl2FH507ZzpMwuOetj65KxeiJ
Iee2Hhu6TvQcqs6erxMrsVFxuYz9s1eJzo7feEL22Z8Nm46KSF6x43lpt8ebiKDU
zxzdjLBRQOYf3KcCHE2HvbGxPqEfKkwmCJcd1a3Bd/7sgPXrKsJbeCg8LD2x8aTT
DHGXUEVbMv8r3qMAlKXxJ8iBJ9AvdG0nKneVJ8gB6YkCPlSuDlh2bL3CrMPQ5Db+
vtI0EwuGHSMocWX5cns3t31/iWdoOJ/8lvXJoauT+TVmenmhQ0mU71+whVlnahhr
fhKqsZHM4Nryve8LOntndzAIRUK9EZom1ZGfxzEgfgheg0boMfbk9+dS38zVxjmx
EZ4JuTVvAUv4ZgG553JaKed278wNPxdXSqaXggV+HAceFkaW80M6uQhvOCXX+T05
1HCfl3sQmGkYZ1f3DPrcur0jm+PkHPB4Jw29wogBFU0d7dDJQ0qv
=l8Kz
-----END PGP SIGNATURE-----
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FileVault2 Hacks]]></title>
    <link href="http://bd808.com/blog/2013/12/09/file-vault2-hacks/"/>
    <updated>2013-12-09T21:35:52-07:00</updated>
    <id>http://bd808.com/blog/2013/12/09/file-vault2-hacks</id>
    <content type="html"><![CDATA[<p>Mac OS X 10.7 introduced a whole disk encryption service called
<a href="http://support.apple.com/kb/ht4790">FileVault2</a>. This allows you to use AES 128 encryption to protect your
data. This is a great feature but it has a few small drawbacks. It uses the
password of your primary user account to unlock the system. I&rsquo;m a fan of
strong passwords but for encryption I&rsquo;d prefer to use a longer pass phrase for
increased entropy. Second the EFI-boot screen that is used to get the password
to decrypt the disk shows the display name of all usersthat can unlock the
system rather than blank fields for both username and password. This leaks
information that I would really rather not leak. Fortunately I&rsquo;ve found
a little hack to work around both of these issues.</p>

<!-- more -->

<p>The key to my fix lies in this statement from the documentation:</p>

<blockquote>
<p>Users not enabled for FileVault unlock are only able to log into the
computer after an unlock-enabled user has started or unlocked the drive.
Once unlocked, the drive remains unlocked and available to all users, until
the computer is restarted.
<small><a href="http://support.apple.com/kb/ht4790">&ldquo;OS X: About FileVault 2&rdquo;</a></small></p>
</blockquote>

<p>My fix is to create a new local user account that will only be used to unlock
the disk encryption key. This will provide a fix for both issues. Since this
account won&rsquo;t be my primary account I can give it a much longer password
without risk of <a href="https://en.wikipedia.org/wiki/Repetitive_strain_injury">RSI</a> every time that OS X prompts me for an administrator
password to install or update software. I can also give the user an innocuous
display name to be shown on the unlock screen.</p>

<ol>
<li>Create a new account from the <em>Users &amp; Groups</em> control panel:

<ul>
<li>New Account: Standard</li>
<li>Full Name: ************</li>
<li>Account name: encrypt</li>
<li>Password: omg this is a really long passphrase for me to remember</li>
</ul></li>
<li>Follow the <a href="http://support.apple.com/kb/ht4790">instructions</a> for enabling FileVault 2 and chose the new
user as the only user who can unlock the disk.</li>
</ol>

<p>If you already have FileVault 2 enabled you will need to remove the decryption
right from the existing users. The easiest way I&rsquo;ve found to do this is using
the <code>fdesetup</code> command line tool. <code>sudo fdesetup list</code> will show you the
accounts that are enabled. <code>sudo fdesetup remove -user bd808</code> will remove the
certificate for the <em>bd808</em> user.</p>

<p>One last step is to make the new <em>encrypt</em> user log out as soon as they log
in. This will return control to the normal OS X login system where you can
configure the login screen to display username and password prompts instead of
a list of local user accounts. There are probably several ways to do this, but
I chose to make a small application that executes this apple script command:</p>

<p><figure class='code'><figcaption><span>logout </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ignoring application responses
</span><span class='line'>  tell application &ldquo;loginwindow&rdquo; to «event aevtlogo»
</span><span class='line'>end ignoring</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
</feed>
