<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: osx | bd808.com]]></title>
  <link href="http://bd808.com/blog/categories/osx/atom.xml" rel="self"/>
  <link href="http://bd808.com/"/>
  <updated>2014-11-16T10:55:03-07:00</updated>
  <id>http://bd808.com/</id>
  <author>
    <name><![CDATA[Bryan Davis]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[FileVault2 Hacks]]></title>
    <link href="http://bd808.com/blog/2013/12/09/file-vault2-hacks/"/>
    <updated>2013-12-09T21:35:52-07:00</updated>
    <id>http://bd808.com/blog/2013/12/09/file-vault2-hacks</id>
    <content type="html"><![CDATA[<p>Mac OS X 10.7 introduced a whole disk encryption service called
<a href="http://support.apple.com/kb/ht4790">FileVault2</a>. This allows you to use AES 128 encryption to protect your
data. This is a great feature but it has a few small drawbacks. It uses the
password of your primary user account to unlock the system. I&rsquo;m a fan of
strong passwords but for encryption I&rsquo;d prefer to use a longer pass phrase for
increased entropy. Second the EFI-boot screen that is used to get the password
to decrypt the disk shows the display name of all usersthat can unlock the
system rather than blank fields for both username and password. This leaks
information that I would really rather not leak. Fortunately I&rsquo;ve found
a little hack to work around both of these issues.</p>

<!-- more -->

<p>The key to my fix lies in this statement from the documentation:</p>

<blockquote>
<p>Users not enabled for FileVault unlock are only able to log into the
computer after an unlock-enabled user has started or unlocked the drive.
Once unlocked, the drive remains unlocked and available to all users, until
the computer is restarted.
<small><a href="http://support.apple.com/kb/ht4790">&ldquo;OS X: About FileVault 2&rdquo;</a></small></p>
</blockquote>

<p>My fix is to create a new local user account that will only be used to unlock
the disk encryption key. This will provide a fix for both issues. Since this
account won&rsquo;t be my primary account I can give it a much longer password
without risk of <a href="https://en.wikipedia.org/wiki/Repetitive_strain_injury">RSI</a> every time that OS X prompts me for an administrator
password to install or update software. I can also give the user an innocuous
display name to be shown on the unlock screen.</p>

<ol>
<li>Create a new account from the <em>Users &amp; Groups</em> control panel:

<ul>
<li>New Account: Standard</li>
<li>Full Name: ************</li>
<li>Account name: encrypt</li>
<li>Password: omg this is a really long passphrase for me to remember</li>
</ul></li>
<li>Follow the <a href="http://support.apple.com/kb/ht4790">instructions</a> for enabling FileVault 2 and chose the new
user as the only user who can unlock the disk.</li>
</ol>

<p>If you already have FileVault 2 enabled you will need to remove the decryption
right from the existing users. The easiest way I&rsquo;ve found to do this is using
the <code>fdesetup</code> command line tool. <code>sudo fdesetup list</code> will show you the
accounts that are enabled. <code>sudo fdesetup remove -user bd808</code> will remove the
certificate for the <em>bd808</em> user.</p>

<p>One last step is to make the new <em>encrypt</em> user log out as soon as they log
in. This will return control to the normal OS X login system where you can
configure the login screen to display username and password prompts instead of
a list of local user accounts. There are probably several ways to do this, but
I chose to make a small application that executes this apple script command:</p>

<p><figure class='code'><figcaption><span>logout </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ignoring application responses
</span><span class='line'>  tell application &ldquo;loginwindow&rdquo; to «event aevtlogo»
</span><span class='line'>end ignoring</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a Self-signed Code Certificate for XCode]]></title>
    <link href="http://bd808.com/blog/2013/10/21/creating-a-self-signed-code-certificate-for-xcode/"/>
    <updated>2013-10-21T21:38:00-06:00</updated>
    <id>http://bd808.com/blog/2013/10/21/creating-a-self-signed-code-certificate-for-xcode</id>
    <content type="html"><![CDATA[<p>I wanted to make my own build of <a href="http://www.codeux.com/textual/">Textual</a>
the other day and needed a code signing certificate to complete the build.
I decided to make single, long-lived certificate to that I could reuse for
building multiple applications.</p>

<ol>
<li><p>Open the &ldquo;Keychain Access&rdquo; application</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">open -a <span class="s2">&quot;Keychain Access&quot;</span>
</code></pre></div></li>
<li><p>Application menu &gt; Certificate Assistant &gt; Create a Certificate&hellip;</p>

<p><img src="/images/blog/create-certificate-menu.png" alt="Create a Certificate"></p></li>
</ol>

<!-- more -->

<ol>
<li><p>Configure your new certificate</p>

<p><img src="/images/blog/ca-1.png" alt=""></p>

<ul>
<li> Name: Self-signed Applications</li>
<li> Identity Type: Self Signed Root</li>
<li> Certificate Type: Code Signing</li>
<li> [x] Let me override defaults</li>
<li> Continue</li>
</ul></li>
<li><p>Change expiration date</p>

<p><img src="/images/blog/ca-2.png" alt=""></p>

<ul>
<li>Validity Period (days): 3650</li>
<li>Continue</li>
</ul></li>
<li><p>Just keep hitting Continue to accept defaults from here on out</p>

<p><img src="/images/blog/ca-last.png" alt=""></p></li>
</ol>

<p>Note: Xcode seems to cache certificate info on startup. If you had XCode open while you created this certificate, restart it.</p>

<p>I have since used this same certificate to build
<a href="http://growl.info/documentation/developer/growl-source-install.php">Growl</a>
and a couple of other apps. I&rsquo;m thinking that I&rsquo;ll export the public
certificate and import it on my other OSX hosts so I can share the compiled
binaries from machine to machine without needing to recompile them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing my laptop with Boxen]]></title>
    <link href="http://bd808.com/blog/2013/10/14/managing-my-laptop-with-boxen/"/>
    <updated>2013-10-14T22:11:00-06:00</updated>
    <id>http://bd808.com/blog/2013/10/14/managing-my-laptop-with-boxen</id>
    <content type="html"><![CDATA[<p><a href="https://boxen.github.com/">Boxen</a> is a framework and collection of libraries created by the fine folks
at <a href="https://github.com/">GitHub</a> to make setting up and managing Mac OS X computers easy and
repeatable. Rather than a simple set of shell scripts or other provisioning
tools, Boxen uses <a href="https://puppetlabs.com/">Puppet</a> to automate installing and configuring software.
I don&rsquo;t have the time or space to explain how great Puppet is a configuration
management is, so you&rsquo;ll have to trust me or go do your own research.</p>

<p>Anybody could take a stab at rolling their own collection of Puppet manifests
to manage their laptop or their corporate install base. That&rsquo;s actually
exactly what GitHub did to create Boxen. Having tried (and failed) at doing
just that before I was pretty impressed when I gave Boxen a test drive. GitHub
has not only provided a system that &ldquo;works for them&rdquo;; they have also managed
to engineer a reasonably extensible solution for a very complex problem.</p>

<p>You can use your favorite search engine to find folks who can wax poetic about
the magnitude of this accomplishment. Let&rsquo;s get on with a description of what
I&rsquo;ve been able to do with it.</p>

<!-- more -->

<p>I&rsquo;m using Boxen to manage my <code>$DAYJOB</code> laptop. This was a great place to start
because I had a brand new laptop that needed to be setup and a brand new tool
to use to do it. I started by following the <a href="https://github.com/boxen/our-boxen">bootstrapping instructions</a> to
create <a href="https://github.com/bd808/my-boxen">my own copy of the template project</a>. I made a few changes to the
<a href="https://github.com/bd808/my-boxen/blob/master/manifests/site.pp">site manifest</a> and then started working on a <a href="https://github.com/bd808/my-boxen/blob/master/modules/people/manifests/bd808.pp">manifest for myself</a>.</p>

<p>Along the way I decided I didn&rsquo;t like a few of the decisions that the Boxen
architects had made. As I pointed out earlier, the team behind Boxen
anticipated this and changing most things is as easy as forking a repo, making
your change and updating the <a href="https://github.com/bd808/my-boxen/blob/master/Puppetfile">Puppetfile</a> in your Boxen project.</p>

<p>At the moment I have customized or created these repositories:</p>

<ul>
<li><a href="https://github.com/bd808/my-boxen">my-boxen</a>: My fork of <a href="https://github.com/boxen/our-boxen">boxen/our-boxen</a>.</li>
<li><a href="https://github.com/bd808/puppet-boxen">puppet-boxen</a>: Fork of the core
<a href="https://github.com/boxen/puppet-boxen">boxen/puppet-boxen</a> modules that
installs <a href="http://brew.sh/">Homebrew</a> in <code>/usr/local</code> instead of under
<code>/opt/boxen</code>.</li>
<li><a href="https://github.com/bd808/puppet-dnsmasq">puppet-dnsmasq</a>: Fork of
<a href="https://github.com/boxen/puppet-dnsmasq">boxen/dnsmasq</a> that uses the stock
Homebrew <code>dnsmasq</code> install and provides <code>dnsmasq::address</code> to configure new
address mappings.</li>
<li><a href="https://github.com/bd808/puppet-geektool">puppet-geektool</a>: Original
module to install <a href="http://projects.tynsoe.org/en/geektool/">GeekTool</a>.</li>
<li><a href="https://github.com/bd808/puppet-git">puppet-git</a>: Fork of
<a href="https://github.com/boxen/puppet-git">boxen/puppet-git</a> to use the stock
Homebrew version of <a href="http://git-scm.com/">git</a>.</li>
<li><a href="https://github.com/bd808/puppet-growl">puppet-growl</a>: Fork of
<a href="https://github.com/petems/puppet-growl">petems/puppet-growl</a> that installs
an aging version of <a href="http://growl.info/">Growl</a>. I&rsquo;ve since abandoned this
in favor a <a href="http://growl.info/documentation/developer/growl-source-install.php">self-compiled version</a> which I should figure out how to Puppetize.</li>
<li><a href="https://github.com/bd808/puppet-homebrew">puppet-homebrew</a>: Fork of
<a href="https://github.com/nybblr/puppet-homebrew">nybblr/puppet-homebrew</a> that
adds support for installing in <code>/usr/local</code> and using custom Homebrew
<a href="https://github.com/mxcl/homebrew/wiki/brew-tap">taps</a>.</li>
<li><a href="https://github.com/bd808/puppet-monolingual">puppet-monolingual</a>: Original
module to install <a href="http://monolingual.sourceforge.net/">Monolingual</a>.</li>
<li><a href="https://github.com/bd808/puppet-osx">puppet-osx</a>: Fork of
<a href="https://github.com/codec/puppet-osx">codec/puppet-osx</a> that pulls in
patches from <a href="https://github.com/joebadmo/puppet-osx">joebadmo/puppet-osx</a>
and adds a few system settings of my own.</li>
<li><a href="https://github.com/bd808/puppet-slimbatterymonitor">puppet-slimbatterymonitor</a>: Original module to install <a href="http://www.orange-carb.org/SBM/">SlimBatteryMonitor</a>.</li>
</ul>

<p>The one thing I most wish someone would figure out how to do with Boxen/Puppet
is install apps from the <a href="https://www.apple.com/osx/apps/app-store.html">Mac App Store</a>.</p>
]]></content>
  </entry>
  
</feed>
