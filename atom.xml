<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>bd808.com</title><link href="http://bd808.com/" rel="alternate"></link><link href="http://bd808.com/atom.xml" rel="self"></link><id>http://bd808.com/</id><updated>2017-04-17T04:18:24+00:00</updated><entry><title>Making Django migrations that work with MySQL 5.5 and utf8mb4</title><link href="http://bd808.com/blog/2017/04/17/making-django-migrations-that-work-with-mysql-55-and-utf8mb4/" rel="alternate"></link><published>2017-04-17T04:18:24+00:00</published><updated>2017-04-17T04:18:24+00:00</updated><author><name>Bryan Davis</name></author><id>tag:bd808.com,2017-04-17:/blog/2017/04/17/making-django-migrations-that-work-with-mysql-55-and-utf8mb4/</id><summary type="html">&lt;p&gt;I like &lt;a href="https://en.wikipedia.org/wiki/Django_(web_framework)"&gt;Django&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/MySQL"&gt;MySQL&lt;/a&gt;, and &lt;a href="https://en.wikipedia.org/wiki/Unicode"&gt;Unicode&lt;/a&gt;, but getting all three to play together
nicely can sometimes be a bit challenging. One of the more annoying things is
getting Django to make a &lt;a href="https://docs.djangoproject.com/en/1.8/topics/migrations/"&gt;migration&lt;/a&gt; that will create a 255 character
&lt;code&gt;CharField&lt;/code&gt; that is encoded using the &lt;a href="https://dev.mysql.com/doc/refman/5.5/en/charset-unicode-utf8mb4.html"&gt;utf8mb4&lt;/a&gt; character set and indexed.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I like &lt;a href="https://en.wikipedia.org/wiki/Django_(web_framework)"&gt;Django&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/MySQL"&gt;MySQL&lt;/a&gt;, and &lt;a href="https://en.wikipedia.org/wiki/Unicode"&gt;Unicode&lt;/a&gt;, but getting all three to play together
nicely can sometimes be a bit challenging. One of the more annoying things is
getting Django to make a &lt;a href="https://docs.djangoproject.com/en/1.8/topics/migrations/"&gt;migration&lt;/a&gt; that will create a 255 character
&lt;code&gt;CharField&lt;/code&gt; that is encoded using the &lt;a href="https://dev.mysql.com/doc/refman/5.5/en/charset-unicode-utf8mb4.html"&gt;utf8mb4&lt;/a&gt; character set and indexed.&lt;/p&gt;


&lt;p&gt;Out of the box, MySQL's &lt;a href="https://dev.mysql.com/doc/refman/5.5/en/innodb-storage-engine.html"&gt;InnoDB&lt;/a&gt; table type has a maximum index length or 767
bytes. This is enough to index 255 characters in the &lt;a href="https://dev.mysql.com/doc/refman/5.5/en/charset-unicode-utf8.html"&gt;utf8&lt;/a&gt; encoding, but that
encoding won't work for storing any Unicode data from the &lt;a href="https://en.wikipedia.org/wiki/Plane_(Unicode)#Supplementary_Multilingual_Plane"&gt;Supplementary
Multilingual Plane&lt;/a&gt;. That means you can't put a &lt;a href="http://emojipedia.org/unicorn-face/"&gt;unicorn face&lt;/a&gt; (ü¶Ñ) or
a &lt;a href="http://emojipedia.org/slice-of-pizza/"&gt;slice of pizza&lt;/a&gt; (üçï) into a column using this encoding. Changing to the
utf8mb4 character set will allow you to store four byte code points, but only
index 191 characters.&lt;/p&gt;
&lt;p&gt;With MySQL 5.5.14 and later you can raise this limit to 3072 bytes by using
the &lt;a href="https://dev.mysql.com/doc/refman/5.5/en/innodb-parameters.html#sysvar_innodb_large_prefix"&gt;innodb_large_prefix&lt;/a&gt; setting along with the Barracuda file format, file
per table storage, and dynamic row format. The first three can all be set
server wide, but the row format for the table needs to be provided in
a &lt;code&gt;CREATE TABLE&lt;/code&gt; or &lt;code&gt;ALTER TABLE&lt;/code&gt; statement as a &lt;code&gt;ROW_FORMAT=DYNAMIC&lt;/code&gt;
attribute.&lt;/p&gt;
&lt;p&gt;Django does not have a feature flag or setting for adding the
needed attribute. I've worked around this before by using manual database
hacking, but today I figured out a hack that you can manually apply to your
Django migration files to work around it. The trick is to edit the migration
so that the initial field creation uses a length that will fit in the 767 byte
limit, and then add a &lt;code&gt;RunSQL&lt;/code&gt; to change the table's row format and an
&lt;code&gt;AlterField&lt;/code&gt; to increase the field length.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="n"&gt;operations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;         &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;UnicodeHack&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;         &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hack&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;         &lt;span class="p"&gt;],&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="p"&gt;),&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RunSQL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ALTER TABLE unicodehack ROW_FORMAT = DYNAMIC;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AlterField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;         &lt;span class="n"&gt;model_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;unicodehack&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;         &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hack&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;         &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="p"&gt;),&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="p"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="python"></category><category term="django"></category><category term="mysql"></category><category term="unicode"></category><category term="hacks"></category></entry><entry><title>SASL auth with python-irc</title><link href="http://bd808.com/blog/2017/03/01/sasl-auth-with-python-irc/" rel="alternate"></link><published>2017-03-01T06:48:04+00:00</published><updated>2017-03-01T06:48:04+00:00</updated><author><name>Bryan Davis</name></author><id>tag:bd808.com,2017-03-01:/blog/2017/03/01/sasl-auth-with-python-irc/</id><summary type="html">&lt;p&gt;I maintain a couple of IRC bots that help out with Wikimedia devops tasks.
&lt;a href="https://wikitech.wikimedia.org/wiki/Tool:Jouncebot"&gt;Jouncebot&lt;/a&gt; was a bot I started helping with when &lt;a href="https://github.com/mattofak"&gt;@mattofak&lt;/a&gt; moved on to
other projects. Later I developed &lt;a href="https://wikitech.wikimedia.org/wiki/Tool:Stashbot"&gt;Stashbot&lt;/a&gt; as a replacement for using the
&lt;a href="https://www.elastic.co/guide/en/logstash/current/plugins-inputs-irc.html"&gt;Logstash&lt;/a&gt; that collected data for my &lt;a href="https://tools.wmflabs.org/sal/"&gt;SAL&lt;/a&gt; tool in &lt;a href="https://wikitech.wikimedia.org/wiki/Portal:Tool_Labs"&gt;Tool
Labs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Both bots are built using the awesome &lt;a href="https://pypi.python.org/pypi/irc"&gt;irc python library&lt;/a&gt; from &lt;a href="https://github.com/jaraco"&gt;Jason
Coombs&lt;/a&gt;. I've copied various core irc behaviors from one bot to the other as
I've discovered and fixed various bugs in how I was using the library.
I finally got around to extracting these core parts into a Python library of
it's own that I have named "IRC Bot Behavior Bundle" or &lt;a href="https://python-ib3.readthedocs.io/en/latest/index.html"&gt;IB3&lt;/a&gt; for short.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I maintain a couple of IRC bots that help out with Wikimedia devops tasks.
&lt;a href="https://wikitech.wikimedia.org/wiki/Tool:Jouncebot"&gt;Jouncebot&lt;/a&gt; was a bot I started helping with when &lt;a href="https://github.com/mattofak"&gt;@mattofak&lt;/a&gt; moved on to
other projects. Later I developed &lt;a href="https://wikitech.wikimedia.org/wiki/Tool:Stashbot"&gt;Stashbot&lt;/a&gt; as a replacement for using the
&lt;a href="https://www.elastic.co/guide/en/logstash/current/plugins-inputs-irc.html"&gt;Logstash&lt;/a&gt; that collected data for my &lt;a href="https://tools.wmflabs.org/sal/"&gt;SAL&lt;/a&gt; tool in &lt;a href="https://wikitech.wikimedia.org/wiki/Portal:Tool_Labs"&gt;Tool
Labs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Both bots are built using the awesome &lt;a href="https://pypi.python.org/pypi/irc"&gt;irc python library&lt;/a&gt; from &lt;a href="https://github.com/jaraco"&gt;Jason
Coombs&lt;/a&gt;. I've copied various core irc behaviors from one bot to the other as
I've discovered and fixed various bugs in how I was using the library.
I finally got around to extracting these core parts into a Python library of
it's own that I have named "IRC Bot Behavior Bundle" or &lt;a href="https://python-ib3.readthedocs.io/en/latest/index.html"&gt;IB3&lt;/a&gt; for short.&lt;/p&gt;


&lt;p&gt;The IB3 library provides a collection of &lt;a href="https://en.wikipedia.org/wiki/Mixin"&gt;mixin&lt;/a&gt; classes that can be used to
extend an &lt;code&gt;irc.bot.SingleServerIRCBot&lt;/code&gt; instance to do things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Encrypt connections using SSL&lt;/li&gt;
&lt;li&gt;Authenticate to Freenode&lt;/li&gt;
&lt;li&gt;Join channels slowly to avoid flood bans&lt;/li&gt;
&lt;li&gt;Ping the upstream IRC server to check for connection liveness&lt;/li&gt;
&lt;li&gt;Rejoin channels when kicked&lt;/li&gt;
&lt;li&gt;Regain primary nickname after receiving a &lt;code&gt;ERR_NICKNAMEINUSE&lt;/code&gt; message&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of these behaviors are pretty battle tested from months/years of use in
one or the other of my bots.&lt;/p&gt;
&lt;p&gt;IB3 has one sexy new addition, &lt;a href="http://ircv3.net/specs/extensions/sasl-3.1.html"&gt;SASL&lt;/a&gt; PLAIN authentication. SASL is an IRC v3
protocol extension that allows a client to authenticate at the time of
connection. This method lets you authenticate before your connection becomes
visible to other clients on the server. It also seems to be a bit faster than
the normal exchange with NickServ.&lt;/p&gt;
&lt;p&gt;Making a basic bot that uses SASL auth is pretty easy using the library:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# This program is free software: you can redistribute it and/or modify it&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# under the terms of the GNU General Public License as published by the Free&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# Software Foundation, either version 3 of the License, or (at your option)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# any later version.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# This program is distributed in the hope that it will be useful, but WITHOUT&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# more details.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# You should have received a copy of the GNU General Public License along with&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# this program.  If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ib3.auth&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;irc.bot&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;NICKNAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;your account name here&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;your password here&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;CHANNELS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;##sasl_test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ExampleSaslBot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ib3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SASL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;irc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SingleServerIRCBot&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="c1"&gt;# Add your ``on_*`` handlers here&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;pass&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;bot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ExampleSaslBot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;server_list&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;chat.freenode.net&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6667&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;nickname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;NICKNAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;realname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;NICKNAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;ident_password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PASSWORD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;channels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;CHANNELS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;bot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;ib3.auth.SASL&lt;/code&gt; mixin will take care of these things for you behind the
scenes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Send &lt;code&gt;CAP REQ :sasl&lt;/code&gt; as soon as &lt;code&gt;SingleServerIRCBot&lt;/code&gt; knows it has connected&lt;/li&gt;
&lt;li&gt;Listen for a &lt;code&gt;CAP ACK :sasl&lt;/code&gt; response from the server&lt;/li&gt;
&lt;li&gt;Send an &lt;code&gt;AUTHENTICATE PLAIN&lt;/code&gt; message to start the auth handshake&lt;/li&gt;
&lt;li&gt;Wait for an &lt;code&gt;AUTHENTICATE +&lt;/code&gt; response&lt;/li&gt;
&lt;li&gt;Send &lt;code&gt;AUTHENTICATE &amp;lt;base64 encoded 'username\0username\0password'&amp;gt;&lt;/code&gt; SASL
  PLAIN request&lt;/li&gt;
&lt;li&gt;Wait for a &lt;code&gt;903 :SASL authentication successful&lt;/code&gt; response&lt;/li&gt;
&lt;li&gt;Send a &lt;code&gt;CAP END&lt;/code&gt; message to finish the handshake&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both Jouncebot and Stashbot have been using this code for a few weeks with no
problems yet. If you try it out and find issues, please &lt;a href="https://github.com/bd808/python-ib3/issues"&gt;report a bug&lt;/a&gt; and
I'll see if I can figure out how to make things work better.&lt;/p&gt;</content><category term="python"></category><category term="irc"></category><category term="SASL"></category><category term="howto"></category></entry><entry><title>Switching from Octopress to Pelican</title><link href="http://bd808.com/blog/2017/03/01/switching-from-octopress-to-pelican/" rel="alternate"></link><published>2017-03-01T04:19:06+00:00</published><updated>2017-03-01T04:19:06+00:00</updated><author><name>Bryan Davis</name></author><id>tag:bd808.com,2017-03-01:/blog/2017/03/01/switching-from-octopress-to-pelican/</id><summary type="html">&lt;p&gt;I fell down a rabbit hole a few days ago. I wanted to write a blog post about
&lt;a href="https://python-ib3.readthedocs.io/"&gt;my new irc library&lt;/a&gt;, but the &lt;a href="//github.com/rbenv/rbenv"&gt;rbenv&lt;/a&gt; I had setup to run &lt;a href="http://octopress.org/"&gt;Octopress&lt;/a&gt; was all
messed up. I stated poking around to try and remind myself how to get it
working again and eventually decided that I should really look for a new
static site generator written in language that I like to use. I ended up
picking &lt;a href="https://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I fell down a rabbit hole a few days ago. I wanted to write a blog post about
&lt;a href="https://python-ib3.readthedocs.io/"&gt;my new irc library&lt;/a&gt;, but the &lt;a href="//github.com/rbenv/rbenv"&gt;rbenv&lt;/a&gt; I had setup to run &lt;a href="http://octopress.org/"&gt;Octopress&lt;/a&gt; was all
messed up. I stated poking around to try and remind myself how to get it
working again and eventually decided that I should really look for a new
static site generator written in language that I like to use. I ended up
picking &lt;a href="https://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;.&lt;/p&gt;


&lt;p&gt;There are &lt;a href="https://www.google.com/search?q=octopress+to+pelican"&gt;plenty of blog posts&lt;/a&gt; already that cover the basics, so I won't try
to give a complete walk through. I mostly used the guides by &lt;a href="https://jakevdp.github.io/blog/2013/05/07/migrating-from-octopress-to-pelican/"&gt;Jake Vanderplas&lt;/a&gt;
and &lt;a href="http://jhshi.me/2015/10/11/migrating-from-octopress-to-pelican/"&gt;Jinghao Shi&lt;/a&gt; along with the &lt;a href="http://docs.getpelican.com/en/stable/"&gt;manual&lt;/a&gt;. I have blogged before about how
I setup Octopress to make &lt;a href="/blog/2012/04/14/using-github-issues-for-comments/"&gt;GitHub issues for comments&lt;/a&gt;. I ported this
functionality to Pelican with a couple of commits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/bd808/bd808.github.com/commit/412c0b3fc45dacda2bd2800ca5b2d8a49d9ee46e"&gt;bd808/bd808.github.com@412c0b3&lt;/a&gt; adds the javascript and template changes
  needed to render comments and a link to the GitHub issue for a given post.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bd808/bd808.github.com/commit/fe45c78fd96577923f958f1c743f8572c0714829"&gt;bd808/bd808.github.com@fe45c78&lt;/a&gt; adds a &lt;code&gt;new_post&lt;/code&gt; target to my &lt;a href="http://www.fabfile.org/"&gt;fabric&lt;/a&gt;
  file which creates an issue in the GitHub project and adds the needed
  metadata to a stub Markdown file.&lt;/li&gt;
&lt;/ul&gt;</content><category term="github"></category><category term="octopress"></category><category term="pelican"></category><category term="howto"></category></entry><entry><title>Puppet file recurse pitfall</title><link href="http://bd808.com/blog/2014/09/30/puppet-file-recurse-pitfall/" rel="alternate"></link><published>2014-09-30T20:44:13-06:00</published><updated>2014-09-30T20:44:13-06:00</updated><author><name>Bryan Davis</name></author><id>tag:bd808.com,2014-09-30:/blog/2014/09/30/puppet-file-recurse-pitfall/</id><summary type="html">&lt;p&gt;&lt;a href="http://puppetlabs.com/"&gt;Puppet&lt;/a&gt; has become my go to system management tool in no small part because
it is the tool that the operations group at &lt;a href="https://wikimediafoundation.org/wiki/Home"&gt;$DAYJOB&lt;/a&gt; has standardized on
for our production infrastructure management. It took quite a while for me to
get the hang of how Puppet does what it does, but today I'd say I'm a fairly
decent Puppet programmer. Every once in a while however I stumble on something
new and surprising.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;a href="http://puppetlabs.com/"&gt;Puppet&lt;/a&gt; has become my go to system management tool in no small part because
it is the tool that the operations group at &lt;a href="https://wikimediafoundation.org/wiki/Home"&gt;$DAYJOB&lt;/a&gt; has standardized on
for our production infrastructure management. It took quite a while for me to
get the hang of how Puppet does what it does, but today I'd say I'm a fairly
decent Puppet programmer. Every once in a while however I stumble on something
new and surprising.&lt;/p&gt;


&lt;p&gt;A couple of weeks ago I got an interesting bug report from a user about
a collection of Puppet manifests I help manage. The bug was that his testing
server was pegged at 99% CPU utilization for multiple minutes during each
&lt;code&gt;puppet agent&lt;/code&gt; run. The bug reporter did a great job of investigating and had
also found that &lt;code&gt;strace&lt;/code&gt; showed a repetitive stream of &lt;code&gt;stat()&lt;/code&gt; calls while
the process was hogging the CPU.&lt;/p&gt;
&lt;p&gt;This also turned out to the be the great kind of bug that was reproducible.
The first testing server I tried the steps from the bug report on showed the
exact same symptoms. I grabbed some very verbose logs by turning on the
&lt;code&gt;--debug&lt;/code&gt; logging in &lt;code&gt;puppet agent&lt;/code&gt; and logging all of the system calls with
&lt;code&gt;strace&lt;/code&gt; at the same time:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nv"&gt;TZ&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;UTC strace /usr/bin/ruby /usr/bin/puppet agent --onetime --verbose &lt;span class="se"&gt;\&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;   --no-daemonize --no-splay --debug &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;   tee /tmp/loud-puppet-strace.log&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Looking at the &lt;code&gt;strace&lt;/code&gt; messages there was clearly a pattern of &lt;code&gt;stat()&lt;/code&gt; calls
for &lt;code&gt;.rb&lt;/code&gt; files in unexpected numbers. Puppet was pretty obviously searching
for ruby files that were related to several &lt;a href="https://docs.puppetlabs.com/learning/definedtypes.html"&gt;defined types&lt;/a&gt; implemented in
our manifests. The log was full of lines like
&lt;code&gt;stat("/var/lib/puppet/lib/puppet/type/git::clone.rb")&lt;/code&gt;. A little
searching led me to &lt;a href="https://tickets.puppetlabs.com/browse/PUP-2924"&gt;PUP-2924&lt;/a&gt; which explained that Puppet was checking to
see if the type had been implemented as a &lt;a href="https://docs.puppetlabs.com/guides/custom_types.html"&gt;custom type&lt;/a&gt; in Ruby code first
before looking for a defined type in the Puppet manifests. In our case, there
were 17 possible paths for a Ruby class to be loaded from which led to 17
failed stat calls for each defined type in the manifest.&lt;/p&gt;
&lt;p&gt;What this did not explain however what why there were so many checks for our
&lt;code&gt;git::clone&lt;/code&gt; resource. Two million, two hundred ninety three thousand, six
hundred and seventy seven calls to &lt;code&gt;stat()&lt;/code&gt; for the same collection of files
in this one puppet run. Insanity!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;$ grep stat&lt;span class="se"&gt;\(&lt;/span&gt; loud-puppet-strace.log &lt;span class="p"&gt;|&lt;/span&gt; grep git::clone &lt;span class="p"&gt;|&lt;/span&gt; wc -l&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="m"&gt;2293677&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So now I knew what was happening, but I needed to dig deeper to try and figure
out why it was happening. For this I wanted even more verbose &lt;code&gt;puppet agent&lt;/code&gt;
output.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nv"&gt;TZ&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;UTC /usr/bin/ruby /usr/bin/puppet agent --onetime --verbose &lt;span class="se"&gt;\&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;     --no-daemonize --no-splay --debug --trace --evaltrace --noop &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;     tee /tmp/puppet-noop.log&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I watched this run happen in real time and took note of what was logged just
before the long pause in logging which accompanied each CPU utilization spike
that I now knew correlated to the outrageous number of &lt;code&gt;stat()&lt;/code&gt; calls.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Info&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Git&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Clone&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;vagrant&lt;/span&gt;&lt;span class="o"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;Starting&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;evaluate&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;resource&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;Info&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Git&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Clone&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;vagrant&lt;/span&gt;&lt;span class="o"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;Evaluated&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="mf"&gt;0.01&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;[...&lt;/span&gt; &lt;span class="n"&gt;long&lt;/span&gt; &lt;span class="n"&gt;pause&lt;/span&gt; &lt;span class="n"&gt;here&lt;/span&gt; &lt;span class="o"&gt;...]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;Info&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/Stage[main]/Labs_vagrant/File[/srv/&lt;/span&gt;&lt;span class="n"&gt;vagrant&lt;/span&gt;&lt;span class="o"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;Starting&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;evaluate&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;resource&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;Info&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/Stage[main]/Labs_vagrant/File[/srv/&lt;/span&gt;&lt;span class="n"&gt;vagrant&lt;/span&gt;&lt;span class="o"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;Evaluated&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="mf"&gt;0.00&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This led to my ah ha moment and an eventual fix. The &lt;code&gt;File[/srv/vagrant]&lt;/code&gt;
resource had a definition that looked something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;file&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/srv/vagrant&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;recurse&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;owner&lt;/span&gt;   &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;vagrant&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;group&lt;/span&gt;   &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;www-data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;require&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="na"&gt;Git&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="na"&gt;Clone&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;vagrant&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The intent of this was to recursively manage the ownership of files in the
/srv/vagrant directory. Seems pretty simple right? &lt;code&gt;chown -R vagrant:www-data
/srv/vagrant&lt;/code&gt; would do the same thing at a command prompt.&lt;/p&gt;
&lt;p&gt;It turns out however that what Puppet does under the hood is more complicated.
The &lt;code&gt;recurse =&amp;gt; true&lt;/code&gt; flag makes Puppet do the equivalent of a &lt;code&gt;find&lt;/code&gt; command
on the /srv/vagrant directory and then create a new File resource for each file
and directory found that replicates the other settings of the parent type.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;file&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/srv/vagrant/file1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;owner&lt;/span&gt;   &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;vagrant&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;group&lt;/span&gt;   &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;www-data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;require&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="na"&gt;Git&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="na"&gt;Clone&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;vagrant&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;file&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/srv/vagrant/file2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;owner&lt;/span&gt;   &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;vagrant&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;group&lt;/span&gt;   &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;www-data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;require&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="na"&gt;Git&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="na"&gt;Clone&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;vagrant&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c"&gt;# ... Lots and lots more file resources here ...&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;file&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/srv/vagrant/subdir/subdir/subdir/fileN&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;owner&lt;/span&gt;   &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;vagrant&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;group&lt;/span&gt;   &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;www-data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;require&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="na"&gt;Git&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="na"&gt;Clone&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;vagrant&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All of these resources are added to the internal DAG (Directed Acyclic Graph)
and then evaluated one by one. Our /srv/vagrant directory can have a lot of
files beneath it. In my testing server there turned out to be about 135,000
files. So Puppet added 135,000 extra nodes to the DAG and as it placed each
one it called &lt;code&gt;stat()&lt;/code&gt; 17 times to see if there was a Ruby class providing the
&lt;code&gt;git::clone&lt;/code&gt; resource that Puppet wanted to ensure that the new File resource
followed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;YIKES!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I think there are probably several opportunities here for optimizations in the
Puppet implementation itself. Caching the implementation of the &lt;code&gt;git::clone&lt;/code&gt;
resource would be one that comes to mind pretty quickly. Making recursive File
resources operate based on one node rather than N would be another. There is
probably some kind of graph insertion change that could be made as well. If
I was more comfortable with Ruby I might take a stab at one or more of these
myself.&lt;/p&gt;
&lt;p&gt;To fix the bug at hand however I looked around and found that we really didn't
need to bother with the recursive &lt;code&gt;chown&lt;/code&gt; at all, so I was able to remove the
whole &lt;code&gt;File[/srv/vagrant]&lt;/code&gt; resource from the manifest and let our &lt;code&gt;git::clone&lt;/code&gt;
implementation create the directory when it performed the initial git
repository clone operation.&lt;/p&gt;</content><category term="puppet"></category><category term="sysadmin"></category></entry><entry><title>GnuPG key transition statement</title><link href="http://bd808.com/blog/2014/05/15/gnupg-key-transition-statement/" rel="alternate"></link><published>2014-05-15T22:33:39-06:00</published><updated>2014-05-15T22:33:39-06:00</updated><author><name>Bryan Davis</name></author><id>tag:bd808.com,2014-05-15:/blog/2014/05/15/gnupg-key-transition-statement/</id><summary type="html">&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;-----BEGIN PGP SIGNED MESSAGE-----&lt;/span&gt;
&lt;span class="code-line"&gt;Hash: SHA1,SHA512&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;I am transitioning GPG keys from an old 1024-bit DSA key to a new&lt;/span&gt;
&lt;span class="code-line"&gt;4096-bit RSA key.  The old key will continue to be valid for some time,&lt;/span&gt;
&lt;span class="code-line"&gt;but I prefer all new correspondence to be encrypted to the new key, and&lt;/span&gt;
&lt;span class="code-line"&gt;will ‚Ä¶&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;-----BEGIN PGP SIGNED MESSAGE-----&lt;/span&gt;
&lt;span class="code-line"&gt;Hash: SHA1,SHA512&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;I am transitioning GPG keys from an old 1024-bit DSA key to a new&lt;/span&gt;
&lt;span class="code-line"&gt;4096-bit RSA key.  The old key will continue to be valid for some time,&lt;/span&gt;
&lt;span class="code-line"&gt;but I prefer all new correspondence to be encrypted to the new key, and&lt;/span&gt;
&lt;span class="code-line"&gt;will be making all signatures going forward with the new key.&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;This transition document is signed with both keys to validate the&lt;/span&gt;
&lt;span class="code-line"&gt;transition.&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;If you have signed my old key, I would appreciate signatures on my new&lt;/span&gt;
&lt;span class="code-line"&gt;key as well, provided that your signing policy permits that without&lt;/span&gt;
&lt;span class="code-line"&gt;re-authenticating me.&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;The old key, which I am transitioning away from, is:&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  pub   1024D/0x41E5C23F0F8E76D6 [created: 2004-10-14]&lt;/span&gt;
&lt;span class="code-line"&gt;    Key fingerprint = FE97 560A 1C17 F268 1A20  5B80 41E5 C23F 0F8E 76D6&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;The new key, to which I am transitioning, is:&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  pub   4096R/0xC139E10FD9F20FC1 [created: 2014-05-16]&lt;/span&gt;
&lt;span class="code-line"&gt;    Key fingerprint = 7DFA 4AEF AC15 8BFC 151D  2DD8 C139 E10F D9F2 0FC1&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;To fetch the full new key from a public key server using GnuPG, run:&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  gpg --keyserver keys.gnupg.net --recv-key 0xC139E10FD9F20FC1&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;If you have already validated my old key, you can then validate that the&lt;/span&gt;
&lt;span class="code-line"&gt;new key is signed by my old key:&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  gpg --check-sigs 0xC139E10FD9F20FC1&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;If you then want to sign my new key, a simple and safe way to do that is&lt;/span&gt;
&lt;span class="code-line"&gt;by using caff as follows:&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  caff 0xC139E10FD9F20FC1&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;Please contact me via e-mail at &amp;amp;lt;bd808@bd808.com&amp;amp;gt; if you have any&lt;/span&gt;
&lt;span class="code-line"&gt;questions about this document or this transition.&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;Bryan Davis&lt;/span&gt;
&lt;span class="code-line"&gt;&amp;amp;lt;bd808@bd808.com&amp;amp;gt;&lt;/span&gt;
&lt;span class="code-line"&gt;2014-05-15&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;-----BEGIN PGP SIGNATURE-----&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;iEYEARECAAYFAlN1m3cACgkQQeXCPw+OdtYXEwCfXUThM0JsPacy1bCBQ6rZpWRY&lt;/span&gt;
&lt;span class="code-line"&gt;dAcAoIMg91zhQlgo2DJCu3o9BUzCqEJuiQIcBAEBCgAGBQJTdZt3AAoJEEhMmO+k&lt;/span&gt;
&lt;span class="code-line"&gt;BO60xv0QAJEV8VYVqpIdEoZWRYw6sGJVmkTCs2rC4OC68/W+1e41hgPqE+i+6ACU&lt;/span&gt;
&lt;span class="code-line"&gt;2MhwusMQhsBu1QpyeWXTOEPMU4rvwwlMeQnIlg+DEFGn2k3qJfxeYooO1Ni9n0US&lt;/span&gt;
&lt;span class="code-line"&gt;fb676RByWnaAZUYPebNrmTvk5bv/M5BSU8XDfPmDsFk5hzeOa1j1kw9Loffr74LL&lt;/span&gt;
&lt;span class="code-line"&gt;LJozHb8Uj9fMZj1f8SzqlhyqPVUWqF3AEE3Dl14Wl2FH507ZzpMwuOetj65KxeiJ&lt;/span&gt;
&lt;span class="code-line"&gt;Iee2Hhu6TvQcqs6erxMrsVFxuYz9s1eJzo7feEL22Z8Nm46KSF6x43lpt8ebiKDU&lt;/span&gt;
&lt;span class="code-line"&gt;zxzdjLBRQOYf3KcCHE2HvbGxPqEfKkwmCJcd1a3Bd/7sgPXrKsJbeCg8LD2x8aTT&lt;/span&gt;
&lt;span class="code-line"&gt;DHGXUEVbMv8r3qMAlKXxJ8iBJ9AvdG0nKneVJ8gB6YkCPlSuDlh2bL3CrMPQ5Db+&lt;/span&gt;
&lt;span class="code-line"&gt;vtI0EwuGHSMocWX5cns3t31/iWdoOJ/8lvXJoauT+TVmenmhQ0mU71+whVlnahhr&lt;/span&gt;
&lt;span class="code-line"&gt;fhKqsZHM4Nryve8LOntndzAIRUK9EZom1ZGfxzEgfgheg0boMfbk9+dS38zVxjmx&lt;/span&gt;
&lt;span class="code-line"&gt;EZ4JuTVvAUv4ZgG553JaKed278wNPxdXSqaXggV+HAceFkaW80M6uQhvOCXX+T05&lt;/span&gt;
&lt;span class="code-line"&gt;1HCfl3sQmGkYZ1f3DPrcur0jm+PkHPB4Jw29wogBFU0d7dDJQ0qv&lt;/span&gt;
&lt;span class="code-line"&gt;=l8Kz&lt;/span&gt;
&lt;span class="code-line"&gt;-----END PGP SIGNATURE-----&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="gpg"></category><category term="security"></category></entry><entry><title>How do you know when you're done?</title><link href="http://bd808.com/blog/2014/01/14/how-do-you-know-when-youre-done/" rel="alternate"></link><published>2014-01-14T21:48:20-07:00</published><updated>2014-01-14T21:48:20-07:00</updated><author><name>Bryan Davis</name></author><id>tag:bd808.com,2014-01-14:/blog/2014/01/14/how-do-you-know-when-youre-done/</id><summary type="html">&lt;p&gt;In scrum a story is "Done" when it meets the team's shared "Definition of
Done". The definition of done is roughly a list of requirements that all parts
of the software increment must adhere to to be called complete. Like most
things in scrum the implementation details are left to the team to decide.
When I was first working with scrum I had a hard time finding examples of what
a typical definition of done would include. Most scrum authors (and even many
trainers) wave their hands and say that it's too specific to the team and
their environment to generalize.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;In scrum a story is "Done" when it meets the team's shared "Definition of
Done". The definition of done is roughly a list of requirements that all parts
of the software increment must adhere to to be called complete. Like most
things in scrum the implementation details are left to the team to decide.
When I was first working with scrum I had a hard time finding examples of what
a typical definition of done would include. Most scrum authors (and even many
trainers) wave their hands and say that it's too specific to the team and
their environment to generalize.&lt;/p&gt;


&lt;p&gt;Intellectually I agree with this, but pragmatically I think that having some
sort of rough draft of ideas to start from makes writing the first draft
easier. This particular definition of Done is written from the perspective of
a cross functional team responsible for implementing features in a product. It
does not include Done criteria for the operations or support teams that will
maintain the deployed software or assist customers in its use. It does however
include deliverables that must be produced by the development team to support
those additional teams.&lt;/p&gt;
&lt;p&gt;This list taken as a whole looks pretty daunting. It turns out that producing
production ready software is hard work. It is such hard work that it takes
a group of well trained individuals working as a team to complete properly.
This list is a recipe that can and should be used by the team to ensure that
they produce an increment that is worthy of their combined energy. When used
properly it will increase the reputation and worth of the team, their product
and the organization.&lt;/p&gt;
&lt;h2&gt;Done with grooming a story&lt;/h2&gt;
&lt;p&gt;A groomed story is &lt;strong&gt;&lt;em&gt;clear, feasible and testable&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Business Goal described&lt;/dt&gt;
&lt;dd&gt;Why will we build this?&lt;/dd&gt;
&lt;dt&gt;Acceptance criteria defined&lt;/dt&gt;
&lt;dd&gt;What will it do?&lt;/dd&gt;
&lt;dt&gt;Tasks identified&lt;/dt&gt;
&lt;dd&gt;How will we do it?&lt;/dd&gt;
&lt;dt&gt;Story points estimated&lt;/dt&gt;
&lt;dd&gt;What will it cost?&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;It may take several iterations to achieve this level of clarity. In fact
anything that can be quickly groomed is necessarily trivial. It may still take
significant time to implement, but it would have to be a variation on work
that has already been done that is understood by the whole team.&lt;/p&gt;
&lt;p&gt;Themes, Epics and large stories will need to be decomposed into smaller parts.
This must happen recursively until the smallest parts are describable using
the criteria established above.&lt;/p&gt;
&lt;p&gt;Spikes or other research may need to be done to remove uncertainty about new
tech or legacy impact. These things are stories in their own right and should
be treated as such. R&amp;amp;D must be a traceable expense and is just as important as
the final product/feature.&lt;/p&gt;
&lt;h2&gt;Done with a story&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;Everything from "Done with grooming a story"&lt;/dt&gt;
&lt;dd&gt;A story must be groomed before it can be implemented.&lt;/dd&gt;
&lt;dt&gt;Design complete&lt;/dt&gt;
&lt;dd&gt;Design is not one size fits all. Some stories must have UML and detailed
functional descriptions. Others will only need a statement of "do this just
like we always do an X feature." The level of design required should be
determined during grooming by the team.&lt;/dd&gt;
&lt;dt&gt;Design artifacts in wiki/bug tracker/other&lt;/dt&gt;
&lt;dd&gt;Design isn't complete until it's tangible artifacts are available to the
team and the business.&lt;/dd&gt;
&lt;dt&gt;Design reviewed by peers&lt;/dt&gt;
&lt;dd&gt;Similar to a code review, design should get a once over by at least one
tangentially involved party to ensure that the level of detail is appropriate
to the story and that the proposed implementation makes sense.&lt;/dd&gt;
&lt;dt&gt;Code complete&lt;/dt&gt;
&lt;dd&gt;All code for the story has been written.&lt;/dd&gt;
&lt;dt&gt;Unit tests written&lt;/dt&gt;
&lt;dd&gt;Unit tests have been written to verify that the code works at the most basic
level. This can be done via TDD or code-then-test as best suits the team and
the story.&lt;/dd&gt;
&lt;dt&gt;All code checked into version control&lt;/dt&gt;
&lt;dd&gt;Feature code and tests are committed to version control.&lt;/dd&gt;
&lt;dt&gt;All unit tests passing&lt;/dt&gt;
&lt;dd&gt;Unit tests are passing in all testable environments.&lt;/dd&gt;
&lt;dt&gt;Automated code checks passing&lt;/dt&gt;
&lt;dd&gt;Coding style, lint and other common automated code quality measurements are passing
according to the organization's definition of passing.&lt;/dd&gt;
&lt;dt&gt;CI tests passing&lt;/dt&gt;
&lt;dd&gt;Automated tests in the continuous integration environment are passing.&lt;/dd&gt;
&lt;dt&gt;Peer code review completed&lt;/dt&gt;
&lt;dd&gt;A code review has been completed involving at least one tangentially
involved party.&lt;/dd&gt;
&lt;dt&gt;Material defects from code review addressed&lt;/dt&gt;
&lt;dd&gt;All questions and defects raised in the code review have been addressed.&lt;/dd&gt;
&lt;dt&gt;All acceptance tests (manual and automated) identified, written and passing.&lt;/dt&gt;
&lt;dd&gt;Given/When/Then style or other detailed acceptance tests for the story have
been written and verified either with automated tests or manual testing.
Automated tests are preferred as they do not increase the overall manual
testing load of the product.&lt;/dd&gt;
&lt;dt&gt;Help/documentation updated&lt;/dt&gt;
&lt;dd&gt;"Just enough" help and documentation has been produced so that the feature
can be used by clients, maintained by developers and supported by customer
service and operations.&lt;/dd&gt;
&lt;dt&gt;Release notes updated&lt;/dt&gt;
&lt;dd&gt;Deliverable artifacts and deployment procedures have been documented.&lt;/dd&gt;
&lt;/dl&gt;

&lt;h2&gt;Done with a sprint&lt;/h2&gt;
&lt;p&gt;&lt;dl&gt;
&lt;dt&gt;Everything from "Done with a story"&lt;/dt&gt;
&lt;dd&gt;All stories in the sprint must be done (or returned to the backlog) for the
sprint to be done.&lt;/dd&gt;
&lt;dt&gt;Released to beta/integration environment&lt;/dt&gt;
&lt;dd&gt;The deliverables identified in the release notes for the Sprint must be
deployed in the beta/integration environment. &lt;/dd&gt;
&lt;dt&gt;Demoed in beta/integration environment (UAT)&lt;/dt&gt;
&lt;dd&gt;The demonstration of the increment to Product Owner and other Stakeholders
must be performed from the beta/integration environment.&lt;/dd&gt;
&lt;dt&gt;Approved by Stakeholders&lt;/dt&gt;
&lt;dd&gt;The increment must be approved following UAT.&lt;/dd&gt;
&lt;dt&gt;CI/automated tests passing&lt;/dt&gt;
&lt;dd&gt;All automated tests against the product must be passing. &lt;/dd&gt;
&lt;dt&gt;Integration tests passing&lt;/dt&gt;
&lt;dd&gt;Manual integration tests for the product must be passing.&lt;/dd&gt;
&lt;dt&gt;Regression tests passing&lt;/dt&gt;
&lt;dd&gt;Manual regression tests for the product must be passing.&lt;/dd&gt;
&lt;dt&gt;Code coverage for automated tests meets acceptable guidelines.&lt;/dt&gt;
&lt;dd&gt;Code coverage measurements for unit tests must be within acceptable ranges.&lt;/dd&gt;
&lt;dt&gt;Performance tests passing&lt;/dt&gt;
&lt;dd&gt;Performance/scaling tests must return results within acceptable ranges.&lt;/dd&gt;
&lt;dt&gt;Diagrams/documentation updated to match final state&lt;/dt&gt;
&lt;dd&gt;Documentation for design, implementation, deployment, support and use must
be updated to match the completed increment.&lt;/dd&gt;
&lt;dt&gt;Bugs closed or pushed into backlog&lt;/dt&gt;
&lt;dd&gt;Defects identified in UAT, QA and development must be resolved or appended
to the backlog for Product Owner triage.&lt;/dd&gt;
&lt;dt&gt;Unfinished stories pushed into backlog&lt;/dt&gt;
&lt;dd&gt;Any work in the sprint which does not meet this definition of done will be
returned to the backlog. The Sprint isn't done as long as any non-done issues
are associated with it.&lt;/dd&gt;
&lt;/dl&gt;&lt;/p&gt;
&lt;h2&gt;Done with a QA/staging release&lt;/h2&gt;
&lt;p&gt;&lt;dl&gt;
&lt;dt&gt;Everything from "Done with a sprint"&lt;/dt&gt;
&lt;dd&gt;All Sprints that are to be included in the release must be Done.&lt;/dd&gt;
&lt;dt&gt;Operations guide updated and approved by Ops&lt;/dt&gt;
&lt;dd&gt;The support documentation delivered to Ops via the wiki must be updated and
those updates must be approved (UAT) by the Operations team.&lt;/dd&gt;
&lt;dt&gt;Automated tests passing&lt;/dt&gt;
&lt;dd&gt;All automated tests available for the QA/Staging environment must be
passing.&lt;/dd&gt;
&lt;/dl&gt;&lt;/p&gt;
&lt;h2&gt;Done with a production release&lt;/h2&gt;
&lt;p&gt;&lt;dl&gt;
&lt;dt&gt;Everything from "Done with a QA/Staging Release"&lt;/dt&gt;
&lt;dd&gt;A successful QA/Staging release is a prerequisite for a Production release.&lt;/dd&gt;
&lt;dt&gt;Stress/Load tests passing&lt;/dt&gt;
&lt;dd&gt;Stress/Load testing in the QA/Staging environment must return results within
acceptable ranges.&lt;/dd&gt;
&lt;dt&gt;Network/Component diagrams updated&lt;/dt&gt;
&lt;dd&gt;Documentation for design, implementation, deployment, support and use must
be updated to match the proposed release.&lt;/dd&gt;
&lt;/dl&gt;&lt;/p&gt;</content><category term="scrum"></category><category term="sdlc"></category></entry><entry><title>FileVault2 Hacks</title><link href="http://bd808.com/blog/2013/12/09/filevault2-hacks/" rel="alternate"></link><published>2013-12-09T21:35:52-07:00</published><updated>2013-12-09T21:35:52-07:00</updated><author><name>Bryan Davis</name></author><id>tag:bd808.com,2013-12-09:/blog/2013/12/09/filevault2-hacks/</id><summary type="html">&lt;p&gt;Mac OS X 10.7 introduced a whole disk encryption service called
&lt;a href="http://support.apple.com/kb/ht4790"&gt;FileVault2&lt;/a&gt;. This allows you to use AES 128 encryption to protect your
data. This is a great feature but it has a few small drawbacks. It uses the
password of your primary user account to unlock the system. I'm a fan of
strong passwords but for encryption I'd prefer to use a longer pass phrase for
increased entropy. Second the EFI-boot screen that is used to get the password
to decrypt the disk shows the display name of all usersthat can unlock the
system rather than blank fields for both username and password. This leaks
information that I would really rather not leak. Fortunately I've found
a little hack to work around both of these issues.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Mac OS X 10.7 introduced a whole disk encryption service called
&lt;a href="http://support.apple.com/kb/ht4790"&gt;FileVault2&lt;/a&gt;. This allows you to use AES 128 encryption to protect your
data. This is a great feature but it has a few small drawbacks. It uses the
password of your primary user account to unlock the system. I'm a fan of
strong passwords but for encryption I'd prefer to use a longer pass phrase for
increased entropy. Second the EFI-boot screen that is used to get the password
to decrypt the disk shows the display name of all usersthat can unlock the
system rather than blank fields for both username and password. This leaks
information that I would really rather not leak. Fortunately I've found
a little hack to work around both of these issues.&lt;/p&gt;


&lt;p&gt;The key to my fix lies in this statement from the documentation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Users not enabled for FileVault unlock are only able to log into the
computer after an unlock-enabled user has started or unlocked the drive.
Once unlocked, the drive remains unlocked and available to all users, until
the computer is restarted.
&lt;small&gt;&lt;a href="http://support.apple.com/kb/ht4790"&gt;"OS X: About FileVault 2"&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My fix is to create a new local user account that will only be used to unlock
the disk encryption key. This will provide a fix for both issues. Since this
account won't be my primary account I can give it a much longer password
without risk of &lt;a href="https://en.wikipedia.org/wiki/Repetitive_strain_injury"&gt;RSI&lt;/a&gt; every time that OS X prompts me for an administrator
password to install or update software. I can also give the user an innocuous
display name to be shown on the unlock screen.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a new account from the &lt;em&gt;Users &amp;amp; Groups&lt;/em&gt; control panel:&lt;/li&gt;
&lt;li&gt;New Account: Standard&lt;/li&gt;
&lt;li&gt;Full Name: &lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;*&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Account name: encrypt&lt;/li&gt;
&lt;li&gt;Password: omg this is a really long passphrase for me to remember&lt;/li&gt;
&lt;li&gt;Follow the &lt;a href="http://support.apple.com/kb/ht4790"&gt;instructions&lt;/a&gt; for enabling FileVault 2 and chose the new
   user as the only user who can unlock the disk.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you already have FileVault 2 enabled you will need to remove the decryption
right from the existing users. The easiest way I've found to do this is using
the &lt;code&gt;fdesetup&lt;/code&gt; command line tool. &lt;code&gt;sudo fdesetup list&lt;/code&gt; will show you the
accounts that are enabled. &lt;code&gt;sudo fdesetup remove -user bd808&lt;/code&gt; will remove the
certificate for the &lt;em&gt;bd808&lt;/em&gt; user.&lt;/p&gt;
&lt;p&gt;One last step is to make the new &lt;em&gt;encrypt&lt;/em&gt; user log out as soon as they log
in. This will return control to the normal OS X login system where you can
configure the login screen to display username and password prompts instead of
a list of local user accounts. There are probably several ways to do this, but
I chose to make a small application that executes this apple script command:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;logout&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;ignoring &lt;/span&gt;&lt;span class="nb"&gt;application responses&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;tell&lt;/span&gt; &lt;span class="nb"&gt;application&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;loginwindow&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; ¬´&lt;span class="nb"&gt;event aevtlogo&lt;/span&gt;¬ª&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;ignoring&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="osx"></category><category term="security"></category></entry><entry><title>Yaml 1.1.1 PECL Module Released</title><link href="http://bd808.com/blog/2013/11/18/yaml-111-pecl-module-released/" rel="alternate"></link><published>2013-11-18T22:20:43-07:00</published><updated>2013-11-18T22:20:43-07:00</updated><author><name>Bryan Davis</name></author><id>tag:bd808.com,2013-11-18:/blog/2013/11/18/yaml-111-pecl-module-released/</id><summary type="html">&lt;p&gt;I'm glad to announce that I finally got around to releasing the bug fix
version of the &lt;a href="http://pecl.php.net/package/yaml"&gt;YAML PECL module&lt;/a&gt; that
I announced on 2013-04-23. Version 1.1.1 fixes several long standing bugs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bugs.php.net/bug.php?id=61770"&gt;#61770&lt;/a&gt; Crash on nonunicode character&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bugs.php.net/bug.php?id=61923"&gt;#61923&lt;/a&gt; Detect_scalar_type() is not aware of base 60 representation&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bugs.php.net/bug.php?id=63086"&gt;#63086&lt;/a&gt; Compiling PHP with YAML as static extension fails&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bugs.php.net/bug.php?id=64019"&gt;#64019&lt;/a&gt; Segmentation fault if yaml anchor ends with a colon&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bugs.php.net/bug.php?id=64694"&gt;#64694&lt;/a&gt; Segfault when array used as mapping key&lt;/li&gt;
&lt;/ul&gt;
</summary><content type="html">&lt;p&gt;I'm glad to announce that I finally got around to releasing the bug fix
version of the &lt;a href="http://pecl.php.net/package/yaml"&gt;YAML PECL module&lt;/a&gt; that
I announced on 2013-04-23. Version 1.1.1 fixes several long standing bugs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bugs.php.net/bug.php?id=61770"&gt;#61770&lt;/a&gt; Crash on nonunicode character&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bugs.php.net/bug.php?id=61923"&gt;#61923&lt;/a&gt; Detect_scalar_type() is not aware of base 60 representation&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bugs.php.net/bug.php?id=63086"&gt;#63086&lt;/a&gt; Compiling PHP with YAML as static extension fails&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bugs.php.net/bug.php?id=64019"&gt;#64019&lt;/a&gt; Segmentation fault if yaml anchor ends with a colon&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bugs.php.net/bug.php?id=64694"&gt;#64694&lt;/a&gt; Segfault when array used as mapping key&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;It also includes a small but important patch from a community member who
discovered that I had left the &lt;code&gt;yaml_emit_file()&lt;/code&gt; method marked as
unimplemented when it actually was fully functional.&lt;/p&gt;
&lt;p&gt;I hope the users of this extension will find the changes to be useful. I also
welcome bug reports, feature requests and patches from the community. I would
especially appreciate it if someone found the time become the maintainer of
a Debian package for the project to make it a little easier for some users to
install.&lt;/p&gt;</content><category term="pecl"></category><category term="yaml"></category><category term="php"></category></entry><entry><title>Planning Work in a Sprint</title><link href="http://bd808.com/blog/2013/10/27/planning-work-in-a-sprint/" rel="alternate"></link><published>2013-10-27T20:05:00+00:00</published><updated>2013-10-27T20:05:00+00:00</updated><author><name>Bryan Davis</name></author><id>tag:bd808.com,2013-10-27:/blog/2013/10/27/planning-work-in-a-sprint/</id><summary type="html">&lt;p&gt;We've been having some discussions at &lt;code&gt;$DAYJOB&lt;/code&gt; about process and
methodologies. The topic of late is &lt;a href="https://scrum.org/"&gt;scrum&lt;/a&gt; and how it may
or may not be helpful for the particular group I work with. I've been
providing some anecdotal input based my past experience with scrum and other
methodologies/frameworks/practices and asking questions about what problems
the group is hoping to find new solutions for.&lt;/p&gt;
&lt;p&gt;I started to write a big wall o' text‚Ñ¢ email about a particular topic and then
decided that maybe a blog post would be a better way to work through my idea.
So dear reader&lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;, here are some of my highly
opinionated and mostly unsubstantiated thoughts about a process that a group
of people could use to plan a scrum sprint (&lt;em&gt;or really any other iterative
unit of work)&lt;/em&gt;.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;We've been having some discussions at &lt;code&gt;$DAYJOB&lt;/code&gt; about process and
methodologies. The topic of late is &lt;a href="https://scrum.org/"&gt;scrum&lt;/a&gt; and how it may
or may not be helpful for the particular group I work with. I've been
providing some anecdotal input based my past experience with scrum and other
methodologies/frameworks/practices and asking questions about what problems
the group is hoping to find new solutions for.&lt;/p&gt;
&lt;p&gt;I started to write a big wall o' text‚Ñ¢ email about a particular topic and then
decided that maybe a blog post would be a better way to work through my idea.
So dear reader&lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;, here are some of my highly
opinionated and mostly unsubstantiated thoughts about a process that a group
of people could use to plan a scrum sprint (&lt;em&gt;or really any other iterative
unit of work)&lt;/em&gt;.&lt;/p&gt;


&lt;h2&gt;Pick some work you think you can get done&lt;/h2&gt;
&lt;p&gt;Step one, pick some work. Sounds easy, but pick it from where? Well that's
a damn good question but one that's going to depend on your environment. For
the sake of this post let's assume that you have access to an ordered list of
features that need to be implemented. Let's further assume that the team and
the stakeholders have talked about these features a little and that the team
has reached a general consensus about how big the top few features are
relative to features the team has worked on in the past. Scrum calls this
a "groomed backlog", but you can call it whatever you'd like.&lt;/p&gt;
&lt;p&gt;Now that you know where the work comes from, pick some. How much? Well, as
much as the team thinks it can get done in the iteration. Without knowing your
team and the length of the iteration and how tricky the problems are I can't
tell you. Just go with your collective gut and pick some. If you pick too
little you can always come back and get more. If you pick too much the team
can use that experiential data to adjust when choosing for the next iteration.
Just pick some work for now and adjust in the future based on what happens
during the iteration&lt;sup id="fnref-2"&gt;&lt;a class="footnote-ref" href="#fn-2"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h2&gt;Figure out what ties the work together&lt;/h2&gt;
&lt;p&gt;Step two, come up with a narrative about why you chose the work. A list of
features and bugs you want to implement is a great start, but you can do
better. It will be a lot easier for the team to make good choices during the
iteration if they have a more noble goal than "cross off all the things on
this list." If the goal is just to get each item done it's more likely that
people will think of each part in isolation rather than thinking about how
this work builds on what came before and enables more enhancements in the
future.&lt;/p&gt;
&lt;p&gt;This step may lead you to switch out some of the things you've chosen with
other things that are in the backlog to make a more cohesive story. That's ok
as long as you keep the most important thing. After all that's the MOST
important thing; if you get it done plus some other stuff and everything works
people should be happy.&lt;/p&gt;
&lt;p&gt;This narrative you've created and the work that supports it are the forecast
for the iteration. The product owner can take this information back to the
rest of the stakeholders and tell them what to expect to hear about in the
demonstration meeting at the end of the iteration. Be careful not to tell
them that all of this work will be completed. The team has said they'll try
to do this but they can't promise that it will get done any more than the
stakeholders  can promise how much money will be raised or how many new
customers will be acquired.&lt;/p&gt;
&lt;h2&gt;Figure out how to do the work&lt;/h2&gt;
&lt;p&gt;The last step before you close the planning meeting and get back to "real
work" is to figure out how to actually &lt;em&gt;do&lt;/em&gt; the work. We're talking about
agile practices here so nobody should expect a gantt chart chart or
a architecture document, but &lt;strike&gt;anarchists&lt;/strike&gt; agile teams need
enough of a plan to do today's work efficiently. The product owner doesn't
need to stick around for this half of the meeting. The team should have enough
information from the feature descriptions already given to make the tactical
plan.&lt;/p&gt;
&lt;p&gt;I'm sure there are other methods that would work as well, but I've personally
had success with a process that starts with finding dependencies. The team
looks at the stories and tries to determine their rough interdependencies. The
goal here is to identify communication interfaces that need to be specified
and sequential implementation order dependencies. The team also looks for
areas of uncertainty that could be resolved with tech spikes and/or further
investigation of the requirements.&lt;/p&gt;
&lt;p&gt;Once you've got the dependencies sorted, start breaking down the most obvious
starting point features. Make a list of the smaller tasks that need
to be completed to finish the feature. Repeat the process by breaking those
tasks down into even smaller tasks. Stop when the leaf tasks are "small
enough". My rule of thumb is that something that feels like it will take 3-5
ideal hours is small enough. Getting smaller than that early on is probably
a waste of time, but staying larger leaves more uncertainty and risk in
the plan. Scrum calls this step "story decomposition".&lt;/p&gt;
&lt;p&gt;The list of decomposed tasks that the team has created is the start of the
iteration backlog. Just like the product backlog this needs to be put in order
so that when a team member or pair needs more work to do they can just pull
the next most important thing in their area of expertise off of the backlog.
You'll reorder the list as the iteration progresses, but get started by
ordering the tasks you just decomposed.&lt;/p&gt;
&lt;p&gt;If you only have a few features to break down, continue to do the work as
a group. If there are quite a few to get through you can split up into
appropriately skilled groups and work in parallel. Depending on your team and
the time you have left in the meeting (two hours per week of iteration is
a suggested total duration), you may have time to outline all of the features.
You need to at least outline enough to keep the whole team occupied for the
rest of today and tomorrow.&lt;/p&gt;
&lt;p&gt;If you have some high risk things to accomplish in the iteration try to break
them down as early as you can so that someone (or some pair) can start on the
tech spikes or API design or whatever sooner rather than later. Don't forget
to put a "decompose feature X" task onto the backlog for any stories that you
didn't have time to get to by the end of the time box.&lt;/p&gt;
&lt;h2&gt;Get to work&lt;/h2&gt;
&lt;p&gt;Now you've got a list of features to implement, a narrative about why these
things go together and at least a day or two of granular tasks to start
working on. Each team member or pair now needs to select one thing to begin
working on. Start by choosing the highest priority task that you have the
skill set to accomplish. When you get &lt;strong&gt;Done&lt;/strong&gt;&lt;sup id="fnref-3"&gt;&lt;a class="footnote-ref" href="#fn-3"&gt;3&lt;/a&gt;&lt;/sup&gt; with the task you've taken
come back to the backlog and chose another. Don't forget to mark the things
you are working on as in progress by whatever tracking mechanism the team is
using so you and another team member don't duplicate the work.&lt;/p&gt;
&lt;p&gt;Whew. That would have been a nasty email to read. I hope you like it better as
a blog post. Don't forget to use inspection and adaptation to refine this
process so that it works well for your team. I think I've given a reasonable
outline of a process that has worked for me in the past, but never be afraid
to look for ways to improve.&lt;/p&gt;
&lt;hr&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;&lt;em&gt;Hi Mom!&lt;/em&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-2"&gt;
&lt;p&gt;&lt;em&gt;"Inspect and adapt" is a common refrain in scrum.&lt;/em&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-3"&gt;
&lt;p&gt;&lt;em&gt;"Definition of Done" is a topic for &lt;a href="/blog/2014/01/14/how-do-you-know-when-youre-done/"&gt;another post&lt;/a&gt;.&lt;/em&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="scrum"></category><category term="sdlc"></category></entry><entry><title>Creating a Self-signed Code Certificate for XCode</title><link href="http://bd808.com/blog/2013/10/21/creating-a-self-signed-code-certificate-for-xcode/" rel="alternate"></link><published>2013-10-21T21:38:00+00:00</published><updated>2013-10-21T21:38:00+00:00</updated><author><name>Bryan Davis</name></author><id>tag:bd808.com,2013-10-21:/blog/2013/10/21/creating-a-self-signed-code-certificate-for-xcode/</id><summary type="html">&lt;p&gt;I wanted to make my own build of &lt;a href="http://www.codeux.com/textual/"&gt;Textual&lt;/a&gt;
the other day and needed a code signing certificate to complete the build.
I decided to make single, long-lived certificate to that I could reuse for
building multiple applications.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I wanted to make my own build of &lt;a href="http://www.codeux.com/textual/"&gt;Textual&lt;/a&gt;
the other day and needed a code signing certificate to complete the build.
I decided to make single, long-lived certificate to that I could reuse for
building multiple applications.&lt;/p&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Open the "Keychain Access" application&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bash
open -a "Keychain Access"&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Application menu &amp;gt; Certificate Assistant &amp;gt; Create a Certificate...&lt;/p&gt;
&lt;p&gt;&lt;img alt="Create a Certificate" src="/static/blog/create-certificate-menu.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure your new certificate&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/blog/ca-1.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Name: Self-signed Applications&lt;/li&gt;
&lt;li&gt;Identity Type: Self Signed Root&lt;/li&gt;
&lt;li&gt;Certificate Type: Code Signing&lt;/li&gt;
&lt;li&gt;[x] Let me override defaults&lt;/li&gt;
&lt;li&gt;Continue&lt;/li&gt;
&lt;li&gt;Change expiration date&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="/static/blog/ca-2.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Validity Period (days): 3650&lt;/li&gt;
&lt;li&gt;Continue&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Just keep hitting Continue to accept defaults from here on out&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/blog/ca-last.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note: Xcode seems to cache certificate info on startup. If you had XCode open while you created this certificate, restart it.&lt;/p&gt;
&lt;p&gt;I have since used this same certificate to build
&lt;a href="http://growl.info/documentation/developer/growl-source-install.php"&gt;Growl&lt;/a&gt;
and a couple of other apps. I'm thinking that I'll export the public
certificate and import it on my other OSX hosts so I can share the compiled
binaries from machine to machine without needing to recompile them.&lt;/p&gt;</content><category term="osx"></category><category term="xcode"></category><category term="howto"></category></entry><entry><title>Managing my laptop with Boxen</title><link href="http://bd808.com/blog/2013/10/14/managing-my-laptop-with-boxen/" rel="alternate"></link><published>2013-10-14T22:11:00+00:00</published><updated>2013-10-14T22:11:00+00:00</updated><author><name>Bryan Davis</name></author><id>tag:bd808.com,2013-10-14:/blog/2013/10/14/managing-my-laptop-with-boxen/</id><summary type="html">&lt;p&gt;&lt;a href="https://boxen.github.com/"&gt;Boxen&lt;/a&gt; is a framework and collection of libraries created by the fine folks
at &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt; to make setting up and managing Mac OS X computers easy and
repeatable. Rather than a simple set of shell scripts or other provisioning
tools, Boxen uses &lt;a href="https://puppetlabs.com/"&gt;Puppet&lt;/a&gt; to automate installing and configuring software.
I don't have the time or space to explain how great Puppet is a configuration
management is, so you'll have to trust me or go do your own research.&lt;/p&gt;
&lt;p&gt;Anybody could take a stab at rolling their own collection of Puppet manifests
to manage their laptop or their corporate install base. That's actually
exactly what GitHub did to create Boxen. Having tried (and failed) at doing
just that before I was pretty impressed when I gave Boxen a test drive. GitHub
has not only provided a system that "works for them"; they have also managed
to engineer a reasonably extensible solution for a very complex problem.&lt;/p&gt;
&lt;p&gt;You can use your favorite search engine to find folks who can wax poetic about
the magnitude of this accomplishment. Let's get on with a description of what
I've been able to do with it.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;a href="https://boxen.github.com/"&gt;Boxen&lt;/a&gt; is a framework and collection of libraries created by the fine folks
at &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt; to make setting up and managing Mac OS X computers easy and
repeatable. Rather than a simple set of shell scripts or other provisioning
tools, Boxen uses &lt;a href="https://puppetlabs.com/"&gt;Puppet&lt;/a&gt; to automate installing and configuring software.
I don't have the time or space to explain how great Puppet is a configuration
management is, so you'll have to trust me or go do your own research.&lt;/p&gt;
&lt;p&gt;Anybody could take a stab at rolling their own collection of Puppet manifests
to manage their laptop or their corporate install base. That's actually
exactly what GitHub did to create Boxen. Having tried (and failed) at doing
just that before I was pretty impressed when I gave Boxen a test drive. GitHub
has not only provided a system that "works for them"; they have also managed
to engineer a reasonably extensible solution for a very complex problem.&lt;/p&gt;
&lt;p&gt;You can use your favorite search engine to find folks who can wax poetic about
the magnitude of this accomplishment. Let's get on with a description of what
I've been able to do with it.&lt;/p&gt;


&lt;p&gt;I'm using Boxen to manage my &lt;code&gt;$DAYJOB&lt;/code&gt; laptop. This was a great place to start
because I had a brand new laptop that needed to be setup and a brand new tool
to use to do it. I started by following the &lt;a href="https://github.com/boxen/our-boxen"&gt;bootstrapping instructions&lt;/a&gt; to
create &lt;a href="https://github.com/bd808/my-boxen"&gt;my own copy of the template project&lt;/a&gt;. I made a few changes to the
&lt;a href="https://github.com/bd808/my-boxen/blob/master/manifests/site.pp"&gt;site manifest&lt;/a&gt; and then started working on a &lt;a href="https://github.com/bd808/my-boxen/blob/master/modules/people/manifests/bd808.pp"&gt;manifest for myself&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Along the way I decided I didn't like a few of the decisions that the Boxen
architects had made. As I pointed out earlier, the team behind Boxen
anticipated this and changing most things is as easy as forking a repo, making
your change and updating the &lt;a href="https://github.com/bd808/my-boxen/blob/master/Puppetfile"&gt;Puppetfile&lt;/a&gt; in your Boxen project.&lt;/p&gt;
&lt;p&gt;At the moment I have customized or created these repositories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/bd808/my-boxen"&gt;my-boxen&lt;/a&gt;: My fork of &lt;a href="https://github.com/boxen/our-boxen"&gt;boxen/our-boxen&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bd808/puppet-boxen"&gt;puppet-boxen&lt;/a&gt;: Fork of the core
  &lt;a href="https://github.com/boxen/puppet-boxen"&gt;boxen/puppet-boxen&lt;/a&gt; modules that
  installs &lt;a href="http://brew.sh/"&gt;Homebrew&lt;/a&gt; in &lt;code&gt;/usr/local&lt;/code&gt; instead of under
  &lt;code&gt;/opt/boxen&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bd808/puppet-dnsmasq"&gt;puppet-dnsmasq&lt;/a&gt;: Fork of
  &lt;a href="https://github.com/boxen/puppet-dnsmasq"&gt;boxen/dnsmasq&lt;/a&gt; that uses the stock
  Homebrew &lt;code&gt;dnsmasq&lt;/code&gt; install and provides &lt;code&gt;dnsmasq::address&lt;/code&gt; to configure new
  address mappings.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bd808/puppet-geektool"&gt;puppet-geektool&lt;/a&gt;: Original
  module to install &lt;a href="http://projects.tynsoe.org/en/geektool/"&gt;GeekTool&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bd808/puppet-git"&gt;puppet-git&lt;/a&gt;: Fork of
  &lt;a href="https://github.com/boxen/puppet-git"&gt;boxen/puppet-git&lt;/a&gt; to use the stock
  Homebrew version of &lt;a href="http://git-scm.com/"&gt;git&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bd808/puppet-growl"&gt;puppet-growl&lt;/a&gt;: Fork of
  &lt;a href="https://github.com/petems/puppet-growl"&gt;petems/puppet-growl&lt;/a&gt; that installs
  an aging version of &lt;a href="http://growl.info/"&gt;Growl&lt;/a&gt;. I've since abandoned this
  in favor a &lt;a href="http://growl.info/documentation/developer/growl-source-install.php"&gt;self-compiled version&lt;/a&gt; which I should figure out how to Puppetize.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bd808/puppet-homebrew"&gt;puppet-homebrew&lt;/a&gt;: Fork of
  &lt;a href="https://github.com/nybblr/puppet-homebrew"&gt;nybblr/puppet-homebrew&lt;/a&gt; that
  adds support for installing in &lt;code&gt;/usr/local&lt;/code&gt; and using custom Homebrew
  &lt;a href="https://github.com/mxcl/homebrew/wiki/brew-tap"&gt;taps&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bd808/puppet-monolingual"&gt;puppet-monolingual&lt;/a&gt;: Original
  module to install &lt;a href="http://monolingual.sourceforge.net/"&gt;Monolingual&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bd808/puppet-osx"&gt;puppet-osx&lt;/a&gt;: Fork of
  &lt;a href="https://github.com/codec/puppet-osx"&gt;codec/puppet-osx&lt;/a&gt; that pulls in
  patches from &lt;a href="https://github.com/joebadmo/puppet-osx"&gt;joebadmo/puppet-osx&lt;/a&gt;
  and adds a few system settings of my own.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bd808/puppet-slimbatterymonitor"&gt;puppet-slimbatterymonitor&lt;/a&gt;: Original module to install &lt;a href="http://www.orange-carb.org/SBM/"&gt;SlimBatteryMonitor&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The one thing I most wish someone would figure out how to do with Boxen/Puppet
is install apps from the &lt;a href="https://www.apple.com/osx/apps/app-store.html"&gt;Mac App Store&lt;/a&gt;.&lt;/p&gt;</content><category term="osx"></category><category term="boxen"></category><category term="puppet"></category><category term="sysadmin"></category></entry><entry><title>Hacking GitHub Contributions Calendar</title><link href="http://bd808.com/blog/2013/04/17/hacking-github-contributions-calendar/" rel="alternate"></link><published>2013-04-17T21:06:00+00:00</published><updated>2013-04-17T21:06:00+00:00</updated><author><name>Bryan Davis</name></author><id>tag:bd808.com,2013-04-17:/blog/2013/04/17/hacking-github-contributions-calendar/</id><summary type="html">&lt;p&gt;GitHub profile pages include a neat visualization of commit history that they
call the "&lt;a href="https://help.github.com/articles/viewing-contributions#contributions-calendar"&gt;contributions calendar&lt;/a&gt;". This 53x7 grid shows the number of
commits and other GitHub interactions that the user performed on each day for
the last year.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Example graph" src="/static/blog/timeline.png"&gt;&lt;/p&gt;
&lt;p&gt;Each cell in the graph is shaded with one of 5 possible colors. These colors
correspond to the &lt;a href="https://en.wikipedia.org/wiki/Quartile"&gt;quartiles&lt;/a&gt; of the &lt;a href="https://en.wikipedia.org/wiki/Normal_distribution"&gt;normal distribution&lt;/a&gt; over the range
&lt;code&gt;[0, max(v)]&lt;/code&gt; where &lt;code&gt;v&lt;/code&gt; is the sum of issues opened, pull requests proposed and commits authored per day.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;GitHub profile pages include a neat visualization of commit history that they
call the "&lt;a href="https://help.github.com/articles/viewing-contributions#contributions-calendar"&gt;contributions calendar&lt;/a&gt;". This 53x7 grid shows the number of
commits and other GitHub interactions that the user performed on each day for
the last year.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Example graph" src="/static/blog/timeline.png"&gt;&lt;/p&gt;
&lt;p&gt;Each cell in the graph is shaded with one of 5 possible colors. These colors
correspond to the &lt;a href="https://en.wikipedia.org/wiki/Quartile"&gt;quartiles&lt;/a&gt; of the &lt;a href="https://en.wikipedia.org/wiki/Normal_distribution"&gt;normal distribution&lt;/a&gt; over the range
&lt;code&gt;[0, max(v)]&lt;/code&gt; where &lt;code&gt;v&lt;/code&gt; is the sum of issues opened, pull requests proposed and commits authored per day.&lt;/p&gt;


&lt;p&gt;If your all time high for the last year was 100 contributions in a single day,
the cells would color like this:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Contributions&lt;/th&gt;
&lt;th align="center"&gt;Color&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;0&lt;/td&gt;
&lt;td align="center"&gt;&lt;img alt="gray" src="/static/blog/eeeeee.png" title="#eeeeee"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;1  - 24&lt;/td&gt;
&lt;td align="center"&gt;&lt;img alt="pale green" src="/static/blog/d6e685.png" title="#d6e685"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;25 - 49&lt;/td&gt;
&lt;td align="center"&gt;&lt;img alt="light green" src="/static/blog/8cc665.png" title="#8cc665"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;50 - 74&lt;/td&gt;
&lt;td align="center"&gt;&lt;img alt="green" src="/static/blog/44a340.png" title="#44a340"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;75+&lt;/td&gt;
&lt;td align="center"&gt;&lt;img alt="dark green" src="/static/blog/1e6823.png" title="#1e6823"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;A tweet got me interested in the possibility of gaming the interaction data to
control the display:&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;GitHub users might find this guy's contribution graph interesting/funny: &lt;a href="https://t.co/xOFjLbqUK2" title="https://github.com/will"&gt;github.com/will&lt;/a&gt;&lt;/p&gt;&amp;mdash; Peter Cooper (@peterc) &lt;a href="https://twitter.com/peterc/status/322636613018607617"&gt;April 12, 2013&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;&lt;a href="https://github.com/will"&gt;@will&lt;/a&gt; has done something to make his calendar spell "WILL" over and over.
Looking at his contribution activity list it was pretty obvious that this
trick had something to do with the &lt;a href="https://github.com/will/githubprofilecheat"&gt;will/githubprofilecheat&lt;/a&gt; and/or
&lt;a href="https://github.com/will/githubprofilecheat2"&gt;will/githubprofilecheat2&lt;/a&gt; repositories.&lt;/p&gt;
&lt;p&gt;I did some digging in the &lt;a href="http://git-scm.com/docs"&gt;git documentation&lt;/a&gt; to see how hard it is to fake
the date on a commit. It turns out that it's as easy as setting an environment
variable. The &lt;code&gt;GIT_AUTHOR_DATE&lt;/code&gt; and &lt;code&gt;GIT_COMMITTER_DATE&lt;/code&gt; environment variables
can be used to provide &lt;a href="http://git-scm.com/docs/git-commit-tree#_commit_information"&gt;git-commit-tree&lt;/a&gt; with dates for the author and
commit dates that are attached to each commit object.&lt;/p&gt;
&lt;p&gt;Armed with this bit of trivia I decided that I would try to do something
interesting with my contributions graph. I didn't just want to copy &lt;a href="https://github.com/will"&gt;@will&lt;/a&gt;
and write my name in the graph. I decided that I would pay homage to my
gravatar instead and make a series of &lt;a href="https://en.wikipedia.org/wiki/Glider_%28Conway%27s_Life%29"&gt;gliders&lt;/a&gt; that ran across the
timeline. The result of my experiment can be seen in the image at the top of
this post.&lt;/p&gt;
&lt;p&gt;The script that I used to generate the commits with faked dates is available
in my &lt;a href="https://github.com/bd808/profile-life"&gt;bd808/profile-life&lt;/a&gt; repository.&lt;/p&gt;
&lt;p&gt;The script takes the path to a pattern file and an optional start date as
arguments.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;./bin/pattern-to-commits.sh patterns/glider.cells &lt;span class="m"&gt;2012&lt;/span&gt;-04-15 &lt;span class="p"&gt;|&lt;/span&gt; sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The pattern file is expected to be in the &lt;a href="http://www.conwaylife.com/wiki/Plaintext"&gt;plaintext&lt;/a&gt; Life format. This
format allows you to specify an on/off pattern. When a cell is "on" the script
will output 23 commits (one per hour) for the corresponding day. "Off" cells
won't generate any commit activity.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;!Name: Profile Glider Train&lt;/span&gt;
&lt;span class="code-line"&gt;!A simulation of a glider cruising across the contributions timeline.&lt;/span&gt;
&lt;span class="code-line"&gt;O.O...O.O....O..................................................................&lt;/span&gt;
&lt;span class="code-line"&gt;.OO.O.O..OO...O.O.O...O.O....O..................................................&lt;/span&gt;
&lt;span class="code-line"&gt;.O...OO.OO..OOO..OO.O.O..OO...O.O.O...O.O....O..................................&lt;/span&gt;
&lt;span class="code-line"&gt;.................O...OO.OO..OOO..OO.O.O..OO...O.O.O...O.O....O..................&lt;/span&gt;
&lt;span class="code-line"&gt;.................................O...OO.OO..OOO..OO.O.O..OO...O.O.O...O.O....O..&lt;/span&gt;
&lt;span class="code-line"&gt;.................................................O...OO.OO..OOO..OO.O.O..OO...O.&lt;/span&gt;
&lt;span class="code-line"&gt;.................................................................O...OO.OO..OOO.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The script reads in this file a column at a time using the &lt;code&gt;cut&lt;/code&gt; command. It
loops over the characters from the column and when it finds an &lt;code&gt;O&lt;/code&gt; it echos
commit commands to stdout:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;GIT_AUTHOR_DATE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2013-04-17T20:00&amp;#39;&lt;/span&gt; &lt;span class="nv"&gt;GIT_COMMITTER_DATE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2013-04-17T20:00&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;git commit --allow-empty -m &lt;span class="s1"&gt;&amp;#39;2013-04-17T20:00&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This output can be piped to bash to apply the commits to the repository.&lt;/p&gt;
&lt;p&gt;An interesting extension of this script would be to support all 5 possible
colors. It would also be nice if the script read your current contribution
history to determine how many commits are necessary to hit the 4th quartile
every time. For now these additions are left as an exercise for the reader. :)&lt;/p&gt;</content><category term="hacks"></category><category term="github"></category><category term="howto"></category></entry><entry><title>Using GitHub issues for comments</title><link href="http://bd808.com/blog/2012/04/14/using-github-issues-for-comments/" rel="alternate"></link><published>2012-04-14T20:22:00+00:00</published><updated>2012-04-14T20:22:00+00:00</updated><author><name>Bryan Davis</name></author><id>tag:bd808.com,2012-04-14:/blog/2012/04/14/using-github-issues-for-comments/</id><summary type="html">&lt;p&gt;I was inspired by &lt;a href="http://ivanzuzak.info/2011/02/18/github-hosted-comments-for-github-hosted-blogs.html"&gt;Ivan Zuzak's post&lt;/a&gt; to try using GitHub issues on the &lt;a href="https://github.com/bd808/bd808.github.com"&gt;repository for this blog&lt;/a&gt; to collect and display reader comments. I'm using &lt;a href="http://octopress.org/"&gt;Octopress&lt;/a&gt; to generate the site, so I decided to make some customizations to make applying Ivan's ideas easy for me.&lt;/p&gt;
&lt;p&gt;I started by adding a new configuration setting to my &lt;code&gt;_config.yml&lt;/code&gt; file: &lt;code&gt;github_comments: true&lt;/code&gt;. I'll use this configuration switch to turn the new feature on in other places in the codebase.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I was inspired by &lt;a href="http://ivanzuzak.info/2011/02/18/github-hosted-comments-for-github-hosted-blogs.html"&gt;Ivan Zuzak's post&lt;/a&gt; to try using GitHub issues on the &lt;a href="https://github.com/bd808/bd808.github.com"&gt;repository for this blog&lt;/a&gt; to collect and display reader comments. I'm using &lt;a href="http://octopress.org/"&gt;Octopress&lt;/a&gt; to generate the site, so I decided to make some customizations to make applying Ivan's ideas easy for me.&lt;/p&gt;
&lt;p&gt;I started by adding a new configuration setting to my &lt;code&gt;_config.yml&lt;/code&gt; file: &lt;code&gt;github_comments: true&lt;/code&gt;. I'll use this configuration switch to turn the new feature on in other places in the codebase.&lt;/p&gt;


&lt;p&gt;Next I changed the &lt;a href="https://github.com/mojombo/jekyll/wiki/Liquid-Extensions"&gt;Liquid template&lt;/a&gt; in source/_layout/post.html to include a link to the comment thread for the post. I added this block right after the existing disqus rendering block:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;source/_layout/post.html&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;{% if site.github_comments and page.github_issue_id %}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="x"&gt;&amp;lt;section id=&amp;quot;comments&amp;quot;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="x"&gt;  &amp;lt;header&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="x"&gt;    &amp;lt;h2&amp;gt;Comments&amp;lt;/h2&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="x"&gt;    &amp;lt;p&amp;gt;Visit &amp;lt;a href=&amp;quot;https://github.com/{{site.github_user}}/{{site.github_user}}.github.com/issues/{{page.github_issue_id}}&amp;quot;&amp;gt;this post&amp;#39;s issue page on GitHub&amp;lt;/a&amp;gt; to add a comment.&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="x"&gt;  &amp;lt;/header&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="x"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="x"&gt;{% endif %}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If the &lt;code&gt;github_comments: true&lt;/code&gt; flag is set and the &lt;a href="https://github.com/mojombo/jekyll/wiki/yaml-front-matter"&gt;yaml front
matter&lt;/a&gt; for the post
contains a &lt;code&gt;github_issue_id: N&lt;/code&gt; setting, this block with display a link to
issue N in the associated GitHub repository.&lt;/p&gt;
&lt;p&gt;Next I wanted to display any current comments. I use a slightly tweaked
version of Ivan's javascript to do this.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;source/_includes/github_comments.html&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;{% if site.github_comments and page.comments == true %}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="x"&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="x"&gt;$.ajax({&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="x"&gt;    url: &amp;quot;https://api.github.com/repos/{{site.github_user}}/{{site.github_user}}.github.com/issues/{{page.github_issue_id}}/comments&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="x"&gt;  , method: &amp;quot;get&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="x"&gt;  , headers: { Accept: &amp;quot;application/vnd.github.full+json&amp;quot; }&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="x"&gt;  , error: function(e){}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="x"&gt;  , success: function(resp){&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="x"&gt;      var cuser, cuserlink, clink, cbody, cavatarlink, cdate;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="x"&gt;      for (var i=0; i&amp;lt;resp.length; i++) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="x"&gt;        cuser = resp[i].user.login;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="x"&gt;        cuserlink = &amp;quot;https://github.com/&amp;quot; + resp[i].user.login;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="x"&gt;        clink = &amp;quot;https://github.com/{{site.github_user}}/{{site.github_user}}.github.com/issues/{{page.github_issue_id}}#issuecomment-&amp;quot; + resp[i].url.substring(resp[i].url.lastIndexOf(&amp;quot;/&amp;quot;)+1);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="x"&gt;        cbody = resp[i].body_html;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="x"&gt;        cavatarlink = resp[i].user.avatar_url;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="x"&gt;        cdate = (new Date(resp[i].created_at)).toLocaleString();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="x"&gt;        $(&amp;quot;#comments&amp;quot;).append(&amp;#39;&amp;lt;div class=&amp;quot;comment&amp;quot;&amp;gt;&amp;lt;div class=&amp;quot;comment-header&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;comment-user&amp;quot; href=&amp;quot;&amp;#39; + cuserlink + &amp;#39;&amp;quot;&amp;gt;&amp;lt;img class=&amp;quot;comment-gravatar&amp;quot; src=&amp;quot;&amp;#39; + cavatarlink + &amp;#39;&amp;quot; alt=&amp;quot;&amp;quot; width=&amp;quot;20&amp;quot; height=&amp;quot;20&amp;quot;&amp;gt; &amp;#39; + cuser + &amp;#39;&amp;lt;/a&amp;gt;&amp;lt;a class=&amp;quot;comment-date&amp;quot; href=&amp;quot;&amp;#39; + clink + &amp;#39;&amp;quot;&amp;gt;&amp;#39; + cdate + &amp;#39;&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;comment-body&amp;quot;&amp;gt;&amp;#39; + cbody + &amp;#39;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;#39;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="x"&gt;      }&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="x"&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="x"&gt;});&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="x"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="x"&gt;{% endif %}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I added an include for this new file in source/_includes/after_footer.html to
get it tacked on to each page:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;source/_includes/after_footer.html&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;{% include github_comments.html %}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Those changes plus the OAuth application configuration described in Ivan's post have the blog all setup for comments. The only problem is that I have to remember to manually create an issue on the GitHub side and add it to the yaml front matter for the post. Being a lazy programmer I wanted to get rid of that burden as well. Lucky for me Octopress already has a Rake task that sets up a new blog post. The changes I made here aren't pretty, but they are pragmatic.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Rakefile&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_comment_issue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;octopi&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;Octopi&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;authenticated&lt;/span&gt; &lt;span class="ss"&gt;:config&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;_github.yml&amp;quot;&lt;/span&gt;  &lt;span class="k"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;bd808&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bd808.github.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;issue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Issue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt; &lt;span class="ss"&gt;:user&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:repo&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="ss"&gt;:params&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="ss"&gt;:title&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="ss"&gt;:body&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Reader comments on [&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;](&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Successfully opened issue &lt;/span&gt;&lt;span class="se"&gt;\#&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;issue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;labels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;issue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_label&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;blog-post&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;issue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I plugged this function into the existing &lt;code&gt;new_post&lt;/code&gt; task so that it will
create an issue and plug it's id into the front matter for the new post
automatically when I run a command like &lt;code&gt;rake new_post["Using GitHub Issues
for Comments"]&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;source/_posts/2012-04-14-using-github-issues-for-comments.markdown&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nn"&gt;---&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;layout&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;post&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;title&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Using&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;GitHub&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;issues&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;for&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;comments&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;date&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;2012-04-14 20:22&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;comments&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;github_issue_id&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;7&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;categories&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nn"&gt;---&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="hacks"></category><category term="github"></category><category term="octopress"></category><category term="howto"></category></entry><entry><title>Generating an Apparently Random Unique Sequence</title><link href="http://bd808.com/blog/2012/03/31/generating-an-apparently-random-unique-sequence/" rel="alternate"></link><published>2012-03-31T15:40:00+00:00</published><updated>2012-03-31T15:40:00+00:00</updated><author><name>Bryan Davis</name></author><id>tag:bd808.com,2012-03-31:/blog/2012/03/31/generating-an-apparently-random-unique-sequence/</id><summary type="html">&lt;p&gt;Using a sequentially increasing counter to generate an id token is easy.
Database sequences and auto-number columns make it fairly trivial to
implement. If that isn't available a simple file or shared memory counter can
be implemented in minutes. Displaying such a number to a client however may
give them more information than you would really like them to have about the
number of ids you are allocating per unit time. We'd really like  to obfuscate
the id somehow while retaining the uniqueness of the original sequence.&lt;/p&gt;
&lt;p&gt;One way to do this is to use a combination of multiplication and modulo
arithmetic to map the sequence number into a constrained set. With careful
choice of the multiplicative constant and the modulo value the resulting
number can be made to wander rather effectively over the entire space of the
target set.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Using a sequentially increasing counter to generate an id token is easy.
Database sequences and auto-number columns make it fairly trivial to
implement. If that isn't available a simple file or shared memory counter can
be implemented in minutes. Displaying such a number to a client however may
give them more information than you would really like them to have about the
number of ids you are allocating per unit time. We'd really like  to obfuscate
the id somehow while retaining the uniqueness of the original sequence.&lt;/p&gt;
&lt;p&gt;One way to do this is to use a combination of multiplication and modulo
arithmetic to map the sequence number into a constrained set. With careful
choice of the multiplicative constant and the modulo value the resulting
number can be made to wander rather effectively over the entire space of the
target set.&lt;/p&gt;


&lt;p&gt;The basic math looks like this:  &lt;code&gt;f(n) := (n * p) % q&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt; := input sequence value&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt; := step size&lt;/li&gt;
&lt;li&gt;&lt;code&gt;q&lt;/code&gt; := maximum result size&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;p&lt;/code&gt; and &lt;code&gt;q&lt;/code&gt; must be chosen such that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt; &amp;lt; &lt;code&gt;q&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt; * &lt;code&gt;q&lt;/code&gt; &amp;lt; arithmetic limit (2^31, 2^32, 2^63, 2^64, ... depending on the precision of the underlying system)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt; ‚ä• &lt;code&gt;q&lt;/code&gt; (&lt;a href="https://en.wikipedia.org/wiki/Coprime"&gt;coprime&lt;/a&gt; or relatively prime)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With &lt;code&gt;p := 5&lt;/code&gt; and &lt;code&gt;q := 12&lt;/code&gt; our function will generate this output:
&lt;table class="table table-bordered"&gt;
  &lt;tr&gt;&lt;th&gt;n&lt;/th&gt;&lt;td&gt;1 &lt;/td&gt;&lt;td&gt; 2 &lt;/td&gt;&lt;td&gt; 3 &lt;/td&gt;&lt;td&gt; 4 &lt;/td&gt;&lt;td&gt; 5 &lt;/td&gt;&lt;td&gt; 6 &lt;/td&gt;&lt;td&gt; 7 &lt;/td&gt;&lt;td&gt; 8 &lt;/td&gt;&lt;td&gt; 9 &lt;/td&gt;&lt;td&gt; 10 &lt;/td&gt;&lt;td&gt; 11 &lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;th&gt;f(n)&lt;/th&gt;&lt;td&gt;5 &lt;/td&gt;&lt;td&gt; 10 &lt;/td&gt;&lt;td&gt; 3 &lt;/td&gt;&lt;td&gt; 8 &lt;/td&gt;&lt;td&gt; 1 &lt;/td&gt;&lt;td&gt; 6 &lt;/td&gt;&lt;td&gt; 11 &lt;/td&gt;&lt;td&gt; 4 &lt;/td&gt;&lt;td&gt; 9 &lt;/td&gt;&lt;td&gt; 2 &lt;/td&gt;&lt;td&gt; 7 &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;Change &lt;code&gt;p&lt;/code&gt; to 7 and you'll get:
&lt;table class="table table-bordered"&gt;
  &lt;tr&gt;&lt;th&gt;n&lt;/th&gt;&lt;td&gt;1 &lt;/td&gt;&lt;td&gt; 2 &lt;/td&gt;&lt;td&gt; 3 &lt;/td&gt;&lt;td&gt; 4 &lt;/td&gt;&lt;td&gt; 5 &lt;/td&gt;&lt;td&gt; 6 &lt;/td&gt;&lt;td&gt; 7 &lt;/td&gt;&lt;td&gt; 8 &lt;/td&gt;&lt;td&gt; 9 &lt;/td&gt;&lt;td&gt; 10 &lt;/td&gt;&lt;td&gt; 11 &lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;th&gt;f(n)&lt;/th&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt; 2&lt;/td&gt;&lt;td&gt; 9&lt;/td&gt;&lt;td&gt; 4&lt;/td&gt;&lt;td&gt; 11&lt;/td&gt;&lt;td&gt; 6&lt;/td&gt;&lt;td&gt; 1&lt;/td&gt;&lt;td&gt; 8&lt;/td&gt;&lt;td&gt; 3&lt;/td&gt;&lt;td&gt; 10&lt;/td&gt;&lt;td&gt; 5&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;The rational for keeping &lt;code&gt;p * q &amp;lt; limit&lt;/code&gt; is that as &lt;code&gt;n&lt;/code&gt; approaches &lt;code&gt;q&lt;/code&gt; the
initial multiplication will approach &lt;code&gt;p * q&lt;/code&gt; and if this calculation overflows
the available precision the result will wrap back into a previously traversed
space causing duplication. The same sort of thing will occur if &lt;code&gt;p&lt;/code&gt; and &lt;code&gt;q&lt;/code&gt;
are not coprime. The result of the modulo will exhibit a period equivalent to
the GCD&lt;sup id="fnref-GCD"&gt;&lt;a class="footnote-ref" href="#fn-GCD"&gt;1&lt;/a&gt;&lt;/sup&gt; of &lt;code&gt;p&lt;/code&gt; and &lt;code&gt;q&lt;/code&gt; rather than mapping the entire range of &lt;code&gt;q&lt;/code&gt;
evenly.&lt;/p&gt;
&lt;p&gt;Careful choice of &lt;code&gt;p&lt;/code&gt; and &lt;code&gt;q&lt;/code&gt; are key to getting a good spread in the output
of the function and maintaining the uniqueness of the result. One easy way to
ensure that the chosen coefficients are coprime is to make them both be prime
powers of prime numbers (eg 9^17, 13^11, 13^15, 19^7, ...).&lt;/p&gt;
&lt;p&gt;This method is a type of &lt;a href="https://en.wikipedia.org/wiki/Linear_congruential_generator"&gt;Linear congruential generator&lt;/a&gt; almost exactly equivalent to the &lt;a href="https://en.wikipedia.org/wiki/Park%E2%80%93Miller_RNG"&gt;Park‚ÄìMiller random number generator&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Examples&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;PHP&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="sd"&gt;/**&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="sd"&gt; * Obfuscate an id generated from a linear sequence.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="sd"&gt; *&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="sd"&gt; * @param int $n Input value&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="sd"&gt; * @param int $p Random walk step size&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="sd"&gt; * @param int $q Maximum result value&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="sd"&gt; * @return int Obfuscated result&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="sd"&gt; */&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;obfuscate_id&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$q&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;$p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nv"&gt;$q&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;PL/SQL&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;FUNCTION&lt;/span&gt; &lt;span class="n"&gt;obfuscate_id&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="nb"&gt;NUMBER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="nb"&gt;NUMBER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="nb"&gt;NUMBER&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;RETURN&lt;/span&gt; &lt;span class="nb"&gt;NUMBER&lt;/span&gt; &lt;span class="k"&gt;IS&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;BEGIN&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;RETURN&lt;/span&gt; &lt;span class="k"&gt;MOD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;END&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;p&gt;Thanks to &lt;a href="http://www.timbarber.org/"&gt;Tim&lt;/a&gt; for explaining all of this to me several times without becoming annoyed at the parts I wasn't getting.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-GCD"&gt;
&lt;p&gt;Greatest Common Divisor&amp;#160;&lt;a class="footnote-backref" href="#fnref-GCD" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="algorithms"></category></entry><entry><title>FizzBuzz ‚Äî the wrong way to do it</title><link href="http://bd808.com/blog/2012/01/18/fizzbuzz-the-wrong-way-to-do-it/" rel="alternate"></link><published>2012-01-18T21:47:00+00:00</published><updated>2012-01-18T21:47:00+00:00</updated><author><name>Bryan Davis</name></author><id>tag:bd808.com,2012-01-18:/blog/2012/01/18/fizzbuzz-the-wrong-way-to-do-it/</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Write a program that prints the numbers from 1 to 100. But for multiples of
three print "Fizz" instead of the number and for the multiples of five print
"Buzz". For numbers which are multiples of both three and five print
"FizzBuzz".
&lt;small&gt;&lt;a href="http://imranontech.com/2007/01/24/using-fizzbuzz-to-find-developers-who-grok-coding/"&gt;imranontech [at] googlemail.com&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Write a program that prints the numbers from 1 to 100. But for multiples of
three print "Fizz" instead of the number and for the multiples of five print
"Buzz". For numbers which are multiples of both three and five print
"FizzBuzz".
&lt;small&gt;&lt;a href="http://imranontech.com/2007/01/24/using-fizzbuzz-to-find-developers-who-grok-coding/"&gt;imranontech [at] googlemail.com&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;p&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Fizz&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Buzz&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;PHP&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nv"&gt;$p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;printf&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;str_repeat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="nv"&gt;$p&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$r&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$p&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%s%s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="nv"&gt;$r&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Fizz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="nv"&gt;$r&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Buzz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Bash&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env bash&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;for&lt;/span&gt; i in &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;..100&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;if&lt;/span&gt;   &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$((&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;&lt;span class="k"&gt;))&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;FizzBuzz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$((&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;  &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="k"&gt;))&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Fizz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$((&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;  &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="k"&gt;))&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Buzz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;else&lt;/span&gt;                       &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;fi&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;done&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="algorithms"></category></entry></feed>